//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 Queries\\PomonaQuery.g

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Pomona.Queries 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PomonaQueryParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD_OP", "AND_OP", "ARRAY_LITERAL", "AS_OP", "DATETIME_LITERAL", "DIV_OP", "DOT_OP", "EQ_OP", "ESC_SEQ", "GE_OP", "GT_OP", "GUID_LITERAL", "HEX_DIGIT", "ID", "INDEXER_ACCESS", "INT", "IN_OP", "LAMBDA_OP", "LE_OP", "LT_OP", "METHOD_CALL", "MOD_OP", "MUL_OP", "NE_OP", "NOT_OP", "OCTAL_ESC", "OR_OP", "PREFIXED_STRING", "ROOT", "STRING", "SUB_OP", "UNICODE_ESC", "WS", "'!'", "'!='", "'%'", "'&&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "'<'", "'<='", "'=='", "'>'", "'>='", "'['", "']'", "'add'", "'and'", "'as'", "'div'", "'eq'", "'ge'", "'gt'", "'in'", "'le'", "'lt'", "'mod'", "'mul'", "'ne'", "'not'", "'or'", "'sub'", "'||'"
	};
	public const int EOF=-1;
	public const int ADD_OP=4;
	public const int AND_OP=5;
	public const int ARRAY_LITERAL=6;
	public const int AS_OP=7;
	public const int DATETIME_LITERAL=8;
	public const int DIV_OP=9;
	public const int DOT_OP=10;
	public const int EQ_OP=11;
	public const int ESC_SEQ=12;
	public const int GE_OP=13;
	public const int GT_OP=14;
	public const int GUID_LITERAL=15;
	public const int HEX_DIGIT=16;
	public const int ID=17;
	public const int INDEXER_ACCESS=18;
	public const int INT=19;
	public const int IN_OP=20;
	public const int LAMBDA_OP=21;
	public const int LE_OP=22;
	public const int LT_OP=23;
	public const int METHOD_CALL=24;
	public const int MOD_OP=25;
	public const int MUL_OP=26;
	public const int NE_OP=27;
	public const int NOT_OP=28;
	public const int OCTAL_ESC=29;
	public const int OR_OP=30;
	public const int PREFIXED_STRING=31;
	public const int ROOT=32;
	public const int STRING=33;
	public const int SUB_OP=34;
	public const int UNICODE_ESC=35;
	public const int WS=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;

	public PomonaQueryParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PomonaQueryParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return PomonaQueryParser.tokenNames; } }
	public override string GrammarFileName { get { return "Queries\\PomonaQuery.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_parse();
	partial void LeaveRule_parse();
	// $ANTLR start "parse"
	// Queries\\PomonaQuery.g:73:8: public parse : exp EOF -> ^( ROOT exp ) ;
	[GrammarRule("parse")]
	public AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> exp1 = default(AstParserRuleReturnScope<object, IToken>);

		object EOF2_tree = default(object);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(73, 1);
		try
		{
			// Queries\\PomonaQuery.g:74:2: ( exp EOF -> ^( ROOT exp ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:74:4: exp EOF
			{
			DebugLocation(74, 4);
			PushFollow(Follow._exp_in_parse478);
			exp1=exp();
			PopFollow();

			stream_exp.Add(exp1.Tree);
			DebugLocation(74, 8);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_parse480);  
			stream_EOF.Add(EOF2);



			{
			// AST REWRITE
			// elements: exp
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 74:12: -> ^( ROOT exp )
			{
				DebugLocation(74, 15);
				// Queries\\PomonaQuery.g:74:15: ^( ROOT exp )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(74, 17);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ROOT, "ROOT"), root_1);

				DebugLocation(74, 22);
				adaptor.AddChild(root_1, stream_exp.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
		}
		DebugLocation(75, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"

	partial void EnterRule_exp();
	partial void LeaveRule_exp();
	// $ANTLR start "exp"
	// Queries\\PomonaQuery.g:77:1: exp : as_expression ;
	[GrammarRule("exp")]
	private AstParserRuleReturnScope<object, IToken> exp()
	{
		EnterRule_exp();
		EnterRule("exp", 2);
		TraceIn("exp", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> as_expression3 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "exp");
		DebugLocation(77, 1);
		try
		{
			// Queries\\PomonaQuery.g:78:2: ( as_expression )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:78:4: as_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(78, 4);
			PushFollow(Follow._as_expression_in_exp499);
			as_expression3=as_expression();
			PopFollow();

			adaptor.AddChild(root_0, as_expression3.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exp", 2);
			LeaveRule("exp", 2);
			LeaveRule_exp();
		}
		DebugLocation(79, 1);
		} finally { DebugExitRule(GrammarFileName, "exp"); }
		return retval;

	}
	// $ANTLR end "exp"

	partial void EnterRule_as_expression();
	partial void LeaveRule_as_expression();
	// $ANTLR start "as_expression"
	// Queries\\PomonaQuery.g:81:1: as_expression : lambda_expression ( 'as' lambda_expression )? -> ^( AS_OP ( lambda_expression )+ ) ;
	[GrammarRule("as_expression")]
	private AstParserRuleReturnScope<object, IToken> as_expression()
	{
		EnterRule_as_expression();
		EnterRule("as_expression", 3);
		TraceIn("as_expression", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal5 = default(IToken);
		AstParserRuleReturnScope<object, IToken> lambda_expression4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lambda_expression6 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal5_tree = default(object);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleSubtreeStream stream_lambda_expression=new RewriteRuleSubtreeStream(adaptor,"rule lambda_expression");
		try { DebugEnterRule(GrammarFileName, "as_expression");
		DebugLocation(81, 1);
		try
		{
			// Queries\\PomonaQuery.g:82:2: ( lambda_expression ( 'as' lambda_expression )? -> ^( AS_OP ( lambda_expression )+ ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:82:4: lambda_expression ( 'as' lambda_expression )?
			{
			DebugLocation(82, 4);
			PushFollow(Follow._lambda_expression_in_as_expression510);
			lambda_expression4=lambda_expression();
			PopFollow();

			stream_lambda_expression.Add(lambda_expression4.Tree);
			DebugLocation(82, 22);
			// Queries\\PomonaQuery.g:82:22: ( 'as' lambda_expression )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==59))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:82:24: 'as' lambda_expression
				{
				DebugLocation(82, 24);
				string_literal5=(IToken)Match(input,59,Follow._59_in_as_expression514);  
				stream_59.Add(string_literal5);

				DebugLocation(82, 29);
				PushFollow(Follow._lambda_expression_in_as_expression516);
				lambda_expression6=lambda_expression();
				PopFollow();

				stream_lambda_expression.Add(lambda_expression6.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }



			{
			// AST REWRITE
			// elements: lambda_expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 82:50: -> ^( AS_OP ( lambda_expression )+ )
			{
				DebugLocation(82, 53);
				// Queries\\PomonaQuery.g:82:53: ^( AS_OP ( lambda_expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(82, 55);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(AS_OP, "AS_OP"), root_1);

				DebugLocation(82, 61);
				if (!(stream_lambda_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_lambda_expression.HasNext )
				{
					DebugLocation(82, 61);
					adaptor.AddChild(root_1, stream_lambda_expression.NextTree());

				}
				stream_lambda_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("as_expression", 3);
			LeaveRule("as_expression", 3);
			LeaveRule_as_expression();
		}
		DebugLocation(83, 1);
		} finally { DebugExitRule(GrammarFileName, "as_expression"); }
		return retval;

	}
	// $ANTLR end "as_expression"

	partial void EnterRule_lambda_expression();
	partial void LeaveRule_lambda_expression();
	// $ANTLR start "lambda_expression"
	// Queries\\PomonaQuery.g:85:1: lambda_expression : or_expression ( ':' or_expression )? -> ^( LAMBDA_OP ( or_expression )+ ) ;
	[GrammarRule("lambda_expression")]
	private AstParserRuleReturnScope<object, IToken> lambda_expression()
	{
		EnterRule_lambda_expression();
		EnterRule("lambda_expression", 4);
		TraceIn("lambda_expression", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal8 = default(IToken);
		AstParserRuleReturnScope<object, IToken> or_expression7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> or_expression9 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal8_tree = default(object);
		RewriteRuleITokenStream stream_49=new RewriteRuleITokenStream(adaptor,"token 49");
		RewriteRuleSubtreeStream stream_or_expression=new RewriteRuleSubtreeStream(adaptor,"rule or_expression");
		try { DebugEnterRule(GrammarFileName, "lambda_expression");
		DebugLocation(85, 1);
		try
		{
			// Queries\\PomonaQuery.g:86:2: ( or_expression ( ':' or_expression )? -> ^( LAMBDA_OP ( or_expression )+ ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:86:4: or_expression ( ':' or_expression )?
			{
			DebugLocation(86, 4);
			PushFollow(Follow._or_expression_in_lambda_expression539);
			or_expression7=or_expression();
			PopFollow();

			stream_or_expression.Add(or_expression7.Tree);
			DebugLocation(86, 18);
			// Queries\\PomonaQuery.g:86:18: ( ':' or_expression )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==49))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:86:20: ':' or_expression
				{
				DebugLocation(86, 20);
				char_literal8=(IToken)Match(input,49,Follow._49_in_lambda_expression543);  
				stream_49.Add(char_literal8);

				DebugLocation(86, 24);
				PushFollow(Follow._or_expression_in_lambda_expression545);
				or_expression9=or_expression();
				PopFollow();

				stream_or_expression.Add(or_expression9.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }



			{
			// AST REWRITE
			// elements: or_expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 86:41: -> ^( LAMBDA_OP ( or_expression )+ )
			{
				DebugLocation(86, 44);
				// Queries\\PomonaQuery.g:86:44: ^( LAMBDA_OP ( or_expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(86, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(LAMBDA_OP, "LAMBDA_OP"), root_1);

				DebugLocation(86, 56);
				if (!(stream_or_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_or_expression.HasNext )
				{
					DebugLocation(86, 56);
					adaptor.AddChild(root_1, stream_or_expression.NextTree());

				}
				stream_or_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expression", 4);
			LeaveRule("lambda_expression", 4);
			LeaveRule_lambda_expression();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expression"); }
		return retval;

	}
	// $ANTLR end "lambda_expression"

	partial void EnterRule_or_expression();
	partial void LeaveRule_or_expression();
	// $ANTLR start "or_expression"
	// Queries\\PomonaQuery.g:89:1: or_expression : and_expression ( ( 'or' | '||' ) and_expression )* -> ^( OR_OP ( and_expression )+ ) ;
	[GrammarRule("or_expression")]
	private AstParserRuleReturnScope<object, IToken> or_expression()
	{
		EnterRule_or_expression();
		EnterRule("or_expression", 5);
		TraceIn("or_expression", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal11 = default(IToken);
		IToken string_literal12 = default(IToken);
		AstParserRuleReturnScope<object, IToken> and_expression10 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> and_expression13 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal11_tree = default(object);
		object string_literal12_tree = default(object);
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleSubtreeStream stream_and_expression=new RewriteRuleSubtreeStream(adaptor,"rule and_expression");
		try { DebugEnterRule(GrammarFileName, "or_expression");
		DebugLocation(89, 1);
		try
		{
			// Queries\\PomonaQuery.g:90:2: ( and_expression ( ( 'or' | '||' ) and_expression )* -> ^( OR_OP ( and_expression )+ ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:90:4: and_expression ( ( 'or' | '||' ) and_expression )*
			{
			DebugLocation(90, 4);
			PushFollow(Follow._and_expression_in_or_expression568);
			and_expression10=and_expression();
			PopFollow();

			stream_and_expression.Add(and_expression10.Tree);
			DebugLocation(90, 19);
			// Queries\\PomonaQuery.g:90:19: ( ( 'or' | '||' ) and_expression )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==71||LA4_1==73))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:90:21: ( 'or' | '||' ) and_expression
					{
					DebugLocation(90, 21);
					// Queries\\PomonaQuery.g:90:21: ( 'or' | '||' )
					int alt3=2;
					try { DebugEnterSubRule(3);
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if ((LA3_1==71))
					{
						alt3 = 1;
					}
					else if ((LA3_1==73))
					{
						alt3 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// Queries\\PomonaQuery.g:90:22: 'or'
						{
						DebugLocation(90, 22);
						string_literal11=(IToken)Match(input,71,Follow._71_in_or_expression573);  
						stream_71.Add(string_literal11);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Queries\\PomonaQuery.g:90:27: '||'
						{
						DebugLocation(90, 27);
						string_literal12=(IToken)Match(input,73,Follow._73_in_or_expression575);  
						stream_73.Add(string_literal12);


						}
						break;

					}
					} finally { DebugExitSubRule(3); }

					DebugLocation(90, 33);
					PushFollow(Follow._and_expression_in_or_expression578);
					and_expression13=and_expression();
					PopFollow();

					stream_and_expression.Add(and_expression13.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }



			{
			// AST REWRITE
			// elements: and_expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 90:51: -> ^( OR_OP ( and_expression )+ )
			{
				DebugLocation(90, 54);
				// Queries\\PomonaQuery.g:90:54: ^( OR_OP ( and_expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(90, 56);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OR_OP, "OR_OP"), root_1);

				DebugLocation(90, 62);
				if (!(stream_and_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_and_expression.HasNext )
				{
					DebugLocation(90, 62);
					adaptor.AddChild(root_1, stream_and_expression.NextTree());

				}
				stream_and_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expression", 5);
			LeaveRule("or_expression", 5);
			LeaveRule_or_expression();
		}
		DebugLocation(91, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expression"); }
		return retval;

	}
	// $ANTLR end "or_expression"

	partial void EnterRule_and_operator();
	partial void LeaveRule_and_operator();
	// $ANTLR start "and_operator"
	// Queries\\PomonaQuery.g:93:1: and_operator : ( 'and' | '&&' ) ;
	[GrammarRule("and_operator")]
	private AstParserRuleReturnScope<object, IToken> and_operator()
	{
		EnterRule_and_operator();
		EnterRule("and_operator", 6);
		TraceIn("and_operator", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set14 = default(IToken);

		object set14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_operator");
		DebugLocation(93, 15);
		try
		{
			// Queries\\PomonaQuery.g:94:2: ( ( 'and' | '&&' ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(94, 2);

			set14=(IToken)input.LT(1);
			if (input.LA(1)==40||input.LA(1)==58)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set14));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_operator", 6);
			LeaveRule("and_operator", 6);
			LeaveRule_and_operator();
		}
		DebugLocation(94, 15);
		} finally { DebugExitRule(GrammarFileName, "and_operator"); }
		return retval;

	}
	// $ANTLR end "and_operator"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();
	// $ANTLR start "and_expression"
	// Queries\\PomonaQuery.g:97:1: and_expression : relational_expr ( and_operator relational_expr )* -> ^( AND_OP ( relational_expr )+ ) ;
	[GrammarRule("and_expression")]
	private AstParserRuleReturnScope<object, IToken> and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 7);
		TraceIn("and_expression", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> relational_expr15 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> and_operator16 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relational_expr17 = default(AstParserRuleReturnScope<object, IToken>);

		RewriteRuleSubtreeStream stream_relational_expr=new RewriteRuleSubtreeStream(adaptor,"rule relational_expr");
		RewriteRuleSubtreeStream stream_and_operator=new RewriteRuleSubtreeStream(adaptor,"rule and_operator");
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(97, 1);
		try
		{
			// Queries\\PomonaQuery.g:98:2: ( relational_expr ( and_operator relational_expr )* -> ^( AND_OP ( relational_expr )+ ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:98:4: relational_expr ( and_operator relational_expr )*
			{
			DebugLocation(98, 4);
			PushFollow(Follow._relational_expr_in_and_expression617);
			relational_expr15=relational_expr();
			PopFollow();

			stream_relational_expr.Add(relational_expr15.Tree);
			DebugLocation(98, 20);
			// Queries\\PomonaQuery.g:98:20: ( and_operator relational_expr )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==40||LA5_1==58))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:98:22: and_operator relational_expr
					{
					DebugLocation(98, 22);
					PushFollow(Follow._and_operator_in_and_expression621);
					and_operator16=and_operator();
					PopFollow();

					stream_and_operator.Add(and_operator16.Tree);
					DebugLocation(98, 35);
					PushFollow(Follow._relational_expr_in_and_expression623);
					relational_expr17=relational_expr();
					PopFollow();

					stream_relational_expr.Add(relational_expr17.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }



			{
			// AST REWRITE
			// elements: relational_expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 98:54: -> ^( AND_OP ( relational_expr )+ )
			{
				DebugLocation(98, 57);
				// Queries\\PomonaQuery.g:98:57: ^( AND_OP ( relational_expr )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(98, 59);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(AND_OP, "AND_OP"), root_1);

				DebugLocation(98, 66);
				if (!(stream_relational_expr.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_relational_expr.HasNext )
				{
					DebugLocation(98, 66);
					adaptor.AddChild(root_1, stream_relational_expr.NextTree());

				}
				stream_relational_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 7);
			LeaveRule("and_expression", 7);
			LeaveRule_and_expression();
		}
		DebugLocation(99, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_relational_operator();
	partial void LeaveRule_relational_operator();
	// $ANTLR start "relational_operator"
	// Queries\\PomonaQuery.g:103:1: relational_operator : ( ( 'gt' | '>' ) -> GT_OP | ( 'lt' | '<' ) -> LT_OP | ( 'eq' | '==' ) -> EQ_OP | ( 'ge' | '>=' ) -> GE_OP | ( 'le' | '<=' ) -> LE_OP | ( 'ne' | '!=' ) -> NE_OP | 'in' -> IN_OP );
	[GrammarRule("relational_operator")]
	private AstParserRuleReturnScope<object, IToken> relational_operator()
	{
		EnterRule_relational_operator();
		EnterRule("relational_operator", 8);
		TraceIn("relational_operator", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal18 = default(IToken);
		IToken char_literal19 = default(IToken);
		IToken string_literal20 = default(IToken);
		IToken char_literal21 = default(IToken);
		IToken string_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken string_literal24 = default(IToken);
		IToken string_literal25 = default(IToken);
		IToken string_literal26 = default(IToken);
		IToken string_literal27 = default(IToken);
		IToken string_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken string_literal30 = default(IToken);

		object string_literal18_tree = default(object);
		object char_literal19_tree = default(object);
		object string_literal20_tree = default(object);
		object char_literal21_tree = default(object);
		object string_literal22_tree = default(object);
		object string_literal23_tree = default(object);
		object string_literal24_tree = default(object);
		object string_literal25_tree = default(object);
		object string_literal26_tree = default(object);
		object string_literal27_tree = default(object);
		object string_literal28_tree = default(object);
		object string_literal29_tree = default(object);
		object string_literal30_tree = default(object);
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_53=new RewriteRuleITokenStream(adaptor,"token 53");
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_50=new RewriteRuleITokenStream(adaptor,"token 50");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		RewriteRuleITokenStream stream_38=new RewriteRuleITokenStream(adaptor,"token 38");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		try { DebugEnterRule(GrammarFileName, "relational_operator");
		DebugLocation(103, 1);
		try
		{
			// Queries\\PomonaQuery.g:104:2: ( ( 'gt' | '>' ) -> GT_OP | ( 'lt' | '<' ) -> LT_OP | ( 'eq' | '==' ) -> EQ_OP | ( 'ge' | '>=' ) -> GE_OP | ( 'le' | '<=' ) -> LE_OP | ( 'ne' | '!=' ) -> NE_OP | 'in' -> IN_OP )
			int alt12=7;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case 53:
			case 63:
				{
				alt12 = 1;
				}
				break;
			case 50:
			case 66:
				{
				alt12 = 2;
				}
				break;
			case 52:
			case 61:
				{
				alt12 = 3;
				}
				break;
			case 54:
			case 62:
				{
				alt12 = 4;
				}
				break;
			case 51:
			case 65:
				{
				alt12 = 5;
				}
				break;
			case 38:
			case 69:
				{
				alt12 = 6;
				}
				break;
			case 64:
				{
				alt12 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:104:4: ( 'gt' | '>' )
				{
				DebugLocation(104, 4);
				// Queries\\PomonaQuery.g:104:4: ( 'gt' | '>' )
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==63))
				{
					alt6 = 1;
				}
				else if ((LA6_1==53))
				{
					alt6 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:104:5: 'gt'
					{
					DebugLocation(104, 5);
					string_literal18=(IToken)Match(input,63,Follow._63_in_relational_operator650);  
					stream_63.Add(string_literal18);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:104:10: '>'
					{
					DebugLocation(104, 10);
					char_literal19=(IToken)Match(input,53,Follow._53_in_relational_operator652);  
					stream_53.Add(char_literal19);


					}
					break;

				}
				} finally { DebugExitSubRule(6); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 104:15: -> GT_OP
				{
					DebugLocation(104, 18);
					adaptor.AddChild(root_0, (object)adaptor.Create(GT_OP, "GT_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:105:4: ( 'lt' | '<' )
				{
				DebugLocation(105, 4);
				// Queries\\PomonaQuery.g:105:4: ( 'lt' | '<' )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==66))
				{
					alt7 = 1;
				}
				else if ((LA7_1==50))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:105:5: 'lt'
					{
					DebugLocation(105, 5);
					string_literal20=(IToken)Match(input,66,Follow._66_in_relational_operator663);  
					stream_66.Add(string_literal20);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:105:10: '<'
					{
					DebugLocation(105, 10);
					char_literal21=(IToken)Match(input,50,Follow._50_in_relational_operator665);  
					stream_50.Add(char_literal21);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 105:15: -> LT_OP
				{
					DebugLocation(105, 18);
					adaptor.AddChild(root_0, (object)adaptor.Create(LT_OP, "LT_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Queries\\PomonaQuery.g:106:4: ( 'eq' | '==' )
				{
				DebugLocation(106, 4);
				// Queries\\PomonaQuery.g:106:4: ( 'eq' | '==' )
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==61))
				{
					alt8 = 1;
				}
				else if ((LA8_1==52))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:106:5: 'eq'
					{
					DebugLocation(106, 5);
					string_literal22=(IToken)Match(input,61,Follow._61_in_relational_operator676);  
					stream_61.Add(string_literal22);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:106:10: '=='
					{
					DebugLocation(106, 10);
					string_literal23=(IToken)Match(input,52,Follow._52_in_relational_operator678);  
					stream_52.Add(string_literal23);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 106:16: -> EQ_OP
				{
					DebugLocation(106, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(EQ_OP, "EQ_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Queries\\PomonaQuery.g:107:4: ( 'ge' | '>=' )
				{
				DebugLocation(107, 4);
				// Queries\\PomonaQuery.g:107:4: ( 'ge' | '>=' )
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==62))
				{
					alt9 = 1;
				}
				else if ((LA9_1==54))
				{
					alt9 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:107:5: 'ge'
					{
					DebugLocation(107, 5);
					string_literal24=(IToken)Match(input,62,Follow._62_in_relational_operator689);  
					stream_62.Add(string_literal24);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:107:10: '>='
					{
					DebugLocation(107, 10);
					string_literal25=(IToken)Match(input,54,Follow._54_in_relational_operator691);  
					stream_54.Add(string_literal25);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 107:16: -> GE_OP
				{
					DebugLocation(107, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(GE_OP, "GE_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Queries\\PomonaQuery.g:108:4: ( 'le' | '<=' )
				{
				DebugLocation(108, 4);
				// Queries\\PomonaQuery.g:108:4: ( 'le' | '<=' )
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==65))
				{
					alt10 = 1;
				}
				else if ((LA10_1==51))
				{
					alt10 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:108:5: 'le'
					{
					DebugLocation(108, 5);
					string_literal26=(IToken)Match(input,65,Follow._65_in_relational_operator702);  
					stream_65.Add(string_literal26);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:108:10: '<='
					{
					DebugLocation(108, 10);
					string_literal27=(IToken)Match(input,51,Follow._51_in_relational_operator704);  
					stream_51.Add(string_literal27);


					}
					break;

				}
				} finally { DebugExitSubRule(10); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 108:16: -> LE_OP
				{
					DebugLocation(108, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(LE_OP, "LE_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Queries\\PomonaQuery.g:109:4: ( 'ne' | '!=' )
				{
				DebugLocation(109, 4);
				// Queries\\PomonaQuery.g:109:4: ( 'ne' | '!=' )
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==69))
				{
					alt11 = 1;
				}
				else if ((LA11_1==38))
				{
					alt11 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:109:5: 'ne'
					{
					DebugLocation(109, 5);
					string_literal28=(IToken)Match(input,69,Follow._69_in_relational_operator715);  
					stream_69.Add(string_literal28);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:109:10: '!='
					{
					DebugLocation(109, 10);
					string_literal29=(IToken)Match(input,38,Follow._38_in_relational_operator717);  
					stream_38.Add(string_literal29);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 109:16: -> NE_OP
				{
					DebugLocation(109, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(NE_OP, "NE_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Queries\\PomonaQuery.g:110:4: 'in'
				{
				DebugLocation(110, 4);
				string_literal30=(IToken)Match(input,64,Follow._64_in_relational_operator727);  
				stream_64.Add(string_literal30);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 110:9: -> IN_OP
				{
					DebugLocation(110, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(IN_OP, "IN_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_operator", 8);
			LeaveRule("relational_operator", 8);
			LeaveRule_relational_operator();
		}
		DebugLocation(111, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_operator"); }
		return retval;

	}
	// $ANTLR end "relational_operator"

	partial void EnterRule_relational_expr();
	partial void LeaveRule_relational_expr();
	// $ANTLR start "relational_expr"
	// Queries\\PomonaQuery.g:121:1: relational_expr : additive_expr ( relational_operator ^ additive_expr )? ;
	[GrammarRule("relational_expr")]
	private AstParserRuleReturnScope<object, IToken> relational_expr()
	{
		EnterRule_relational_expr();
		EnterRule("relational_expr", 9);
		TraceIn("relational_expr", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> additive_expr31 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relational_operator32 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> additive_expr33 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "relational_expr");
		DebugLocation(121, 1);
		try
		{
			// Queries\\PomonaQuery.g:122:2: ( additive_expr ( relational_operator ^ additive_expr )? )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:122:4: additive_expr ( relational_operator ^ additive_expr )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(122, 4);
			PushFollow(Follow._additive_expr_in_relational_expr744);
			additive_expr31=additive_expr();
			PopFollow();

			adaptor.AddChild(root_0, additive_expr31.Tree);
			DebugLocation(122, 18);
			// Queries\\PomonaQuery.g:122:18: ( relational_operator ^ additive_expr )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==38||(LA13_1>=50 && LA13_1<=54)||(LA13_1>=61 && LA13_1<=66)||LA13_1==69))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:122:19: relational_operator ^ additive_expr
				{
				DebugLocation(122, 38);
				PushFollow(Follow._relational_operator_in_relational_expr747);
				relational_operator32=relational_operator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(relational_operator32.Tree, root_0);
				DebugLocation(122, 40);
				PushFollow(Follow._additive_expr_in_relational_expr750);
				additive_expr33=additive_expr();
				PopFollow();

				adaptor.AddChild(root_0, additive_expr33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expr", 9);
			LeaveRule("relational_expr", 9);
			LeaveRule_relational_expr();
		}
		DebugLocation(123, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expr"); }
		return retval;

	}
	// $ANTLR end "relational_expr"

	partial void EnterRule_additive_operator();
	partial void LeaveRule_additive_operator();
	// $ANTLR start "additive_operator"
	// Queries\\PomonaQuery.g:125:1: additive_operator : ( ( 'add' | '+' ) -> ADD_OP | ( 'sub' | '-' ) -> SUB_OP );
	[GrammarRule("additive_operator")]
	private AstParserRuleReturnScope<object, IToken> additive_operator()
	{
		EnterRule_additive_operator();
		EnterRule("additive_operator", 10);
		TraceIn("additive_operator", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal34 = default(IToken);
		IToken char_literal35 = default(IToken);
		IToken string_literal36 = default(IToken);
		IToken char_literal37 = default(IToken);

		object string_literal34_tree = default(object);
		object char_literal35_tree = default(object);
		object string_literal36_tree = default(object);
		object char_literal37_tree = default(object);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_46=new RewriteRuleITokenStream(adaptor,"token 46");
		try { DebugEnterRule(GrammarFileName, "additive_operator");
		DebugLocation(125, 4);
		try
		{
			// Queries\\PomonaQuery.g:126:5: ( ( 'add' | '+' ) -> ADD_OP | ( 'sub' | '-' ) -> SUB_OP )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==44||LA16_1==57))
			{
				alt16 = 1;
			}
			else if ((LA16_1==46||LA16_1==72))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:126:7: ( 'add' | '+' )
				{
				DebugLocation(126, 7);
				// Queries\\PomonaQuery.g:126:7: ( 'add' | '+' )
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==57))
				{
					alt14 = 1;
				}
				else if ((LA14_1==44))
				{
					alt14 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:126:8: 'add'
					{
					DebugLocation(126, 8);
					string_literal34=(IToken)Match(input,57,Follow._57_in_additive_operator767);  
					stream_57.Add(string_literal34);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:126:14: '+'
					{
					DebugLocation(126, 14);
					char_literal35=(IToken)Match(input,44,Follow._44_in_additive_operator769);  
					stream_44.Add(char_literal35);


					}
					break;

				}
				} finally { DebugExitSubRule(14); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 126:19: -> ADD_OP
				{
					DebugLocation(126, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(ADD_OP, "ADD_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:127:7: ( 'sub' | '-' )
				{
				DebugLocation(127, 7);
				// Queries\\PomonaQuery.g:127:7: ( 'sub' | '-' )
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==72))
				{
					alt15 = 1;
				}
				else if ((LA15_1==46))
				{
					alt15 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:127:8: 'sub'
					{
					DebugLocation(127, 8);
					string_literal36=(IToken)Match(input,72,Follow._72_in_additive_operator783);  
					stream_72.Add(string_literal36);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:127:14: '-'
					{
					DebugLocation(127, 14);
					char_literal37=(IToken)Match(input,46,Follow._46_in_additive_operator785);  
					stream_46.Add(char_literal37);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 127:19: -> SUB_OP
				{
					DebugLocation(127, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(SUB_OP, "SUB_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_operator", 10);
			LeaveRule("additive_operator", 10);
			LeaveRule_additive_operator();
		}
		DebugLocation(128, 4);
		} finally { DebugExitRule(GrammarFileName, "additive_operator"); }
		return retval;

	}
	// $ANTLR end "additive_operator"

	partial void EnterRule_additive_expr();
	partial void LeaveRule_additive_expr();
	// $ANTLR start "additive_expr"
	// Queries\\PomonaQuery.g:130:1: additive_expr : multiplicative_expr ( additive_operator ^ multiplicative_expr )* ;
	[GrammarRule("additive_expr")]
	private AstParserRuleReturnScope<object, IToken> additive_expr()
	{
		EnterRule_additive_expr();
		EnterRule("additive_expr", 11);
		TraceIn("additive_expr", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> multiplicative_expr38 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> additive_operator39 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplicative_expr40 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "additive_expr");
		DebugLocation(130, 1);
		try
		{
			// Queries\\PomonaQuery.g:131:2: ( multiplicative_expr ( additive_operator ^ multiplicative_expr )* )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:131:4: multiplicative_expr ( additive_operator ^ multiplicative_expr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(131, 4);
			PushFollow(Follow._multiplicative_expr_in_additive_expr805);
			multiplicative_expr38=multiplicative_expr();
			PopFollow();

			adaptor.AddChild(root_0, multiplicative_expr38.Tree);
			DebugLocation(131, 24);
			// Queries\\PomonaQuery.g:131:24: ( additive_operator ^ multiplicative_expr )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==44||LA17_1==46||LA17_1==57||LA17_1==72))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:131:26: additive_operator ^ multiplicative_expr
					{
					DebugLocation(131, 43);
					PushFollow(Follow._additive_operator_in_additive_expr809);
					additive_operator39=additive_operator();
					PopFollow();

					root_0 = (object)adaptor.BecomeRoot(additive_operator39.Tree, root_0);
					DebugLocation(131, 45);
					PushFollow(Follow._multiplicative_expr_in_additive_expr812);
					multiplicative_expr40=multiplicative_expr();
					PopFollow();

					adaptor.AddChild(root_0, multiplicative_expr40.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expr", 11);
			LeaveRule("additive_expr", 11);
			LeaveRule_additive_expr();
		}
		DebugLocation(132, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expr"); }
		return retval;

	}
	// $ANTLR end "additive_expr"

	partial void EnterRule_multiplicative_operator();
	partial void LeaveRule_multiplicative_operator();
	// $ANTLR start "multiplicative_operator"
	// Queries\\PomonaQuery.g:134:1: multiplicative_operator : ( ( 'mul' | '*' ) -> MUL_OP | ( 'div' | '/' ) -> DIV_OP | ( 'mod' | '%' ) -> MOD_OP );
	[GrammarRule("multiplicative_operator")]
	private AstParserRuleReturnScope<object, IToken> multiplicative_operator()
	{
		EnterRule_multiplicative_operator();
		EnterRule("multiplicative_operator", 12);
		TraceIn("multiplicative_operator", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal41 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken string_literal43 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal46 = default(IToken);

		object string_literal41_tree = default(object);
		object char_literal42_tree = default(object);
		object string_literal43_tree = default(object);
		object char_literal44_tree = default(object);
		object string_literal45_tree = default(object);
		object char_literal46_tree = default(object);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_48=new RewriteRuleITokenStream(adaptor,"token 48");
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_39=new RewriteRuleITokenStream(adaptor,"token 39");
		try { DebugEnterRule(GrammarFileName, "multiplicative_operator");
		DebugLocation(134, 4);
		try
		{
			// Queries\\PomonaQuery.g:135:5: ( ( 'mul' | '*' ) -> MUL_OP | ( 'div' | '/' ) -> DIV_OP | ( 'mod' | '%' ) -> MOD_OP )
			int alt21=3;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case 43:
			case 68:
				{
				alt21 = 1;
				}
				break;
			case 48:
			case 60:
				{
				alt21 = 2;
				}
				break;
			case 39:
			case 67:
				{
				alt21 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:135:9: ( 'mul' | '*' )
				{
				DebugLocation(135, 9);
				// Queries\\PomonaQuery.g:135:9: ( 'mul' | '*' )
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==68))
				{
					alt18 = 1;
				}
				else if ((LA18_1==43))
				{
					alt18 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:135:10: 'mul'
					{
					DebugLocation(135, 10);
					string_literal41=(IToken)Match(input,68,Follow._68_in_multiplicative_operator832);  
					stream_68.Add(string_literal41);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:135:16: '*'
					{
					DebugLocation(135, 16);
					char_literal42=(IToken)Match(input,43,Follow._43_in_multiplicative_operator834);  
					stream_43.Add(char_literal42);


					}
					break;

				}
				} finally { DebugExitSubRule(18); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 135:21: -> MUL_OP
				{
					DebugLocation(135, 24);
					adaptor.AddChild(root_0, (object)adaptor.Create(MUL_OP, "MUL_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:136:9: ( 'div' | '/' )
				{
				DebugLocation(136, 9);
				// Queries\\PomonaQuery.g:136:9: ( 'div' | '/' )
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==60))
				{
					alt19 = 1;
				}
				else if ((LA19_1==48))
				{
					alt19 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:136:10: 'div'
					{
					DebugLocation(136, 10);
					string_literal43=(IToken)Match(input,60,Follow._60_in_multiplicative_operator850);  
					stream_60.Add(string_literal43);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:136:16: '/'
					{
					DebugLocation(136, 16);
					char_literal44=(IToken)Match(input,48,Follow._48_in_multiplicative_operator852);  
					stream_48.Add(char_literal44);


					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 136:21: -> DIV_OP
				{
					DebugLocation(136, 24);
					adaptor.AddChild(root_0, (object)adaptor.Create(DIV_OP, "DIV_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Queries\\PomonaQuery.g:137:6: ( 'mod' | '%' )
				{
				DebugLocation(137, 6);
				// Queries\\PomonaQuery.g:137:6: ( 'mod' | '%' )
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==67))
				{
					alt20 = 1;
				}
				else if ((LA20_1==39))
				{
					alt20 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:137:7: 'mod'
					{
					DebugLocation(137, 7);
					string_literal45=(IToken)Match(input,67,Follow._67_in_multiplicative_operator865);  
					stream_67.Add(string_literal45);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:137:13: '%'
					{
					DebugLocation(137, 13);
					char_literal46=(IToken)Match(input,39,Follow._39_in_multiplicative_operator867);  
					stream_39.Add(char_literal46);


					}
					break;

				}
				} finally { DebugExitSubRule(20); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 137:18: -> MOD_OP
				{
					DebugLocation(137, 21);
					adaptor.AddChild(root_0, (object)adaptor.Create(MOD_OP, "MOD_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_operator", 12);
			LeaveRule("multiplicative_operator", 12);
			LeaveRule_multiplicative_operator();
		}
		DebugLocation(138, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_operator"); }
		return retval;

	}
	// $ANTLR end "multiplicative_operator"

	partial void EnterRule_multiplicative_expr();
	partial void LeaveRule_multiplicative_expr();
	// $ANTLR start "multiplicative_expr"
	// Queries\\PomonaQuery.g:140:1: multiplicative_expr : unary_expr ( multiplicative_operator ^ unary_expr )* ;
	[GrammarRule("multiplicative_expr")]
	private AstParserRuleReturnScope<object, IToken> multiplicative_expr()
	{
		EnterRule_multiplicative_expr();
		EnterRule("multiplicative_expr", 13);
		TraceIn("multiplicative_expr", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> unary_expr47 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplicative_operator48 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unary_expr49 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "multiplicative_expr");
		DebugLocation(140, 1);
		try
		{
			// Queries\\PomonaQuery.g:141:2: ( unary_expr ( multiplicative_operator ^ unary_expr )* )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:141:4: unary_expr ( multiplicative_operator ^ unary_expr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(141, 4);
			PushFollow(Follow._unary_expr_in_multiplicative_expr887);
			unary_expr47=unary_expr();
			PopFollow();

			adaptor.AddChild(root_0, unary_expr47.Tree);
			DebugLocation(141, 15);
			// Queries\\PomonaQuery.g:141:15: ( multiplicative_operator ^ unary_expr )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==39||LA22_1==43||LA22_1==48||LA22_1==60||(LA22_1>=67 && LA22_1<=68)))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:141:17: multiplicative_operator ^ unary_expr
					{
					DebugLocation(141, 40);
					PushFollow(Follow._multiplicative_operator_in_multiplicative_expr891);
					multiplicative_operator48=multiplicative_operator();
					PopFollow();

					root_0 = (object)adaptor.BecomeRoot(multiplicative_operator48.Tree, root_0);
					DebugLocation(141, 42);
					PushFollow(Follow._unary_expr_in_multiplicative_expr894);
					unary_expr49=unary_expr();
					PopFollow();

					adaptor.AddChild(root_0, unary_expr49.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expr", 13);
			LeaveRule("multiplicative_expr", 13);
			LeaveRule_multiplicative_expr();
		}
		DebugLocation(142, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expr"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expr"

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();
	// $ANTLR start "unary_operator"
	// Queries\\PomonaQuery.g:144:1: unary_operator : ( 'not' | '!' ) -> NOT_OP ;
	[GrammarRule("unary_operator")]
	private AstParserRuleReturnScope<object, IToken> unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 14);
		TraceIn("unary_operator", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal50 = default(IToken);
		IToken char_literal51 = default(IToken);

		object string_literal50_tree = default(object);
		object char_literal51_tree = default(object);
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_37=new RewriteRuleITokenStream(adaptor,"token 37");
		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(144, 1);
		try
		{
			// Queries\\PomonaQuery.g:145:2: ( ( 'not' | '!' ) -> NOT_OP )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:145:4: ( 'not' | '!' )
			{
			DebugLocation(145, 4);
			// Queries\\PomonaQuery.g:145:4: ( 'not' | '!' )
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==70))
			{
				alt23 = 1;
			}
			else if ((LA23_1==37))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:145:5: 'not'
				{
				DebugLocation(145, 5);
				string_literal50=(IToken)Match(input,70,Follow._70_in_unary_operator910);  
				stream_70.Add(string_literal50);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:145:11: '!'
				{
				DebugLocation(145, 11);
				char_literal51=(IToken)Match(input,37,Follow._37_in_unary_operator912);  
				stream_37.Add(char_literal51);


				}
				break;

			}
			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 145:16: -> NOT_OP
			{
				DebugLocation(145, 19);
				adaptor.AddChild(root_0, (object)adaptor.Create(NOT_OP, "NOT_OP"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 14);
			LeaveRule("unary_operator", 14);
			LeaveRule_unary_operator();
		}
		DebugLocation(146, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	partial void EnterRule_dot_operator();
	partial void LeaveRule_dot_operator();
	// $ANTLR start "dot_operator"
	// Queries\\PomonaQuery.g:148:1: dot_operator : '.' -> DOT_OP ;
	[GrammarRule("dot_operator")]
	private AstParserRuleReturnScope<object, IToken> dot_operator()
	{
		EnterRule_dot_operator();
		EnterRule("dot_operator", 15);
		TraceIn("dot_operator", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal52 = default(IToken);

		object char_literal52_tree = default(object);
		RewriteRuleITokenStream stream_47=new RewriteRuleITokenStream(adaptor,"token 47");
		try { DebugEnterRule(GrammarFileName, "dot_operator");
		DebugLocation(148, 1);
		try
		{
			// Queries\\PomonaQuery.g:149:2: ( '.' -> DOT_OP )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:149:4: '.'
			{
			DebugLocation(149, 4);
			char_literal52=(IToken)Match(input,47,Follow._47_in_dot_operator928);  
			stream_47.Add(char_literal52);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 149:8: -> DOT_OP
			{
				DebugLocation(149, 11);
				adaptor.AddChild(root_0, (object)adaptor.Create(DOT_OP, "DOT_OP"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dot_operator", 15);
			LeaveRule("dot_operator", 15);
			LeaveRule_dot_operator();
		}
		DebugLocation(150, 1);
		} finally { DebugExitRule(GrammarFileName, "dot_operator"); }
		return retval;

	}
	// $ANTLR end "dot_operator"

	partial void EnterRule_unary_expr();
	partial void LeaveRule_unary_expr();
	// $ANTLR start "unary_expr"
	// Queries\\PomonaQuery.g:153:1: unary_expr : ( unary_operator ^ unary_expr | primary_expr );
	[GrammarRule("unary_expr")]
	private AstParserRuleReturnScope<object, IToken> unary_expr()
	{
		EnterRule_unary_expr();
		EnterRule("unary_expr", 16);
		TraceIn("unary_expr", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> unary_operator53 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unary_expr54 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primary_expr55 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "unary_expr");
		DebugLocation(153, 1);
		try
		{
			// Queries\\PomonaQuery.g:154:2: ( unary_operator ^ unary_expr | primary_expr )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==37||LA24_1==70))
			{
				alt24 = 1;
			}
			else if ((LA24_1==ID||LA24_1==INT||LA24_1==PREFIXED_STRING||LA24_1==STRING||LA24_1==41||LA24_1==55))
			{
				alt24 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:154:4: unary_operator ^ unary_expr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(154, 18);
				PushFollow(Follow._unary_operator_in_unary_expr945);
				unary_operator53=unary_operator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(unary_operator53.Tree, root_0);
				DebugLocation(154, 20);
				PushFollow(Follow._unary_expr_in_unary_expr948);
				unary_expr54=unary_expr();
				PopFollow();

				adaptor.AddChild(root_0, unary_expr54.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:155:4: primary_expr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(155, 4);
				PushFollow(Follow._primary_expr_in_unary_expr953);
				primary_expr55=primary_expr();
				PopFollow();

				adaptor.AddChild(root_0, primary_expr55.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expr", 16);
			LeaveRule("unary_expr", 16);
			LeaveRule_unary_expr();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expr"); }
		return retval;

	}
	// $ANTLR end "unary_expr"

	partial void EnterRule_primary_expr();
	partial void LeaveRule_primary_expr();
	// $ANTLR start "primary_expr"
	// Queries\\PomonaQuery.g:158:1: primary_expr : postfix_expr ( dot_operator ^ postfix_expr )* ;
	[GrammarRule("primary_expr")]
	private AstParserRuleReturnScope<object, IToken> primary_expr()
	{
		EnterRule_primary_expr();
		EnterRule("primary_expr", 17);
		TraceIn("primary_expr", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> postfix_expr56 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> dot_operator57 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> postfix_expr58 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "primary_expr");
		DebugLocation(158, 1);
		try
		{
			// Queries\\PomonaQuery.g:159:2: ( postfix_expr ( dot_operator ^ postfix_expr )* )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:159:4: postfix_expr ( dot_operator ^ postfix_expr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(159, 4);
			PushFollow(Follow._postfix_expr_in_primary_expr964);
			postfix_expr56=postfix_expr();
			PopFollow();

			adaptor.AddChild(root_0, postfix_expr56.Tree);
			DebugLocation(159, 17);
			// Queries\\PomonaQuery.g:159:17: ( dot_operator ^ postfix_expr )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==47))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:159:19: dot_operator ^ postfix_expr
					{
					DebugLocation(159, 31);
					PushFollow(Follow._dot_operator_in_primary_expr968);
					dot_operator57=dot_operator();
					PopFollow();

					root_0 = (object)adaptor.BecomeRoot(dot_operator57.Tree, root_0);
					DebugLocation(159, 33);
					PushFollow(Follow._postfix_expr_in_primary_expr971);
					postfix_expr58=postfix_expr();
					PopFollow();

					adaptor.AddChild(root_0, postfix_expr58.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expr", 17);
			LeaveRule("primary_expr", 17);
			LeaveRule_primary_expr();
		}
		DebugLocation(160, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expr"); }
		return retval;

	}
	// $ANTLR end "primary_expr"

	partial void EnterRule_postfix_expr();
	partial void LeaveRule_postfix_expr();
	// $ANTLR start "postfix_expr"
	// Queries\\PomonaQuery.g:162:1: postfix_expr : ( ID ( '(' arglist_expr ')' ) -> ^( METHOD_CALL ID arglist_expr ) | ID ( '(' ')' ) -> ^( METHOD_CALL ID ) | ID ( '[' arglist_expr ']' ) -> ^( INDEXER_ACCESS ID arglist_expr ) | ID ( '[' ']' ) -> ^( INDEXER_ACCESS ID ) | ID | STRING | INT | '(' ! exp ')' !| '[' arglist_expr ']' -> ^( ARRAY_LITERAL arglist_expr ) | PREFIXED_STRING );
	[GrammarRule("postfix_expr")]
	private AstParserRuleReturnScope<object, IToken> postfix_expr()
	{
		EnterRule_postfix_expr();
		EnterRule("postfix_expr", 18);
		TraceIn("postfix_expr", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID59 = default(IToken);
		IToken char_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken ID63 = default(IToken);
		IToken char_literal64 = default(IToken);
		IToken char_literal65 = default(IToken);
		IToken ID66 = default(IToken);
		IToken char_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken ID70 = default(IToken);
		IToken char_literal71 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken ID73 = default(IToken);
		IToken STRING74 = default(IToken);
		IToken INT75 = default(IToken);
		IToken char_literal76 = default(IToken);
		IToken char_literal78 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal81 = default(IToken);
		IToken PREFIXED_STRING82 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arglist_expr61 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arglist_expr68 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> exp77 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arglist_expr80 = default(AstParserRuleReturnScope<object, IToken>);

		object ID59_tree = default(object);
		object char_literal60_tree = default(object);
		object char_literal62_tree = default(object);
		object ID63_tree = default(object);
		object char_literal64_tree = default(object);
		object char_literal65_tree = default(object);
		object ID66_tree = default(object);
		object char_literal67_tree = default(object);
		object char_literal69_tree = default(object);
		object ID70_tree = default(object);
		object char_literal71_tree = default(object);
		object char_literal72_tree = default(object);
		object ID73_tree = default(object);
		object STRING74_tree = default(object);
		object INT75_tree = default(object);
		object char_literal76_tree = default(object);
		object char_literal78_tree = default(object);
		object char_literal79_tree = default(object);
		object char_literal81_tree = default(object);
		object PREFIXED_STRING82_tree = default(object);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleSubtreeStream stream_arglist_expr=new RewriteRuleSubtreeStream(adaptor,"rule arglist_expr");
		try { DebugEnterRule(GrammarFileName, "postfix_expr");
		DebugLocation(162, 1);
		try
		{
			// Queries\\PomonaQuery.g:163:2: ( ID ( '(' arglist_expr ')' ) -> ^( METHOD_CALL ID arglist_expr ) | ID ( '(' ')' ) -> ^( METHOD_CALL ID ) | ID ( '[' arglist_expr ']' ) -> ^( INDEXER_ACCESS ID arglist_expr ) | ID ( '[' ']' ) -> ^( INDEXER_ACCESS ID ) | ID | STRING | INT | '(' ! exp ')' !| '[' arglist_expr ']' -> ^( ARRAY_LITERAL arglist_expr ) | PREFIXED_STRING )
			int alt26=10;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 41:
					{
					int LA26_3 = input.LA(3);

					if ((LA26_3==42))
					{
						alt26 = 2;
					}
					else if ((LA26_3==ID||LA26_3==INT||LA26_3==PREFIXED_STRING||LA26_3==STRING||LA26_3==37||LA26_3==41||LA26_3==55||LA26_3==70))
					{
						alt26 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 26, 7, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 55:
					{
					int LA26_3 = input.LA(3);

					if ((LA26_3==56))
					{
						alt26 = 4;
					}
					else if ((LA26_3==ID||LA26_3==INT||LA26_3==PREFIXED_STRING||LA26_3==STRING||LA26_3==37||LA26_3==41||LA26_3==55||LA26_3==70))
					{
						alt26 = 3;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 26, 8, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case 38:
				case 39:
				case 40:
				case 42:
				case 43:
				case 44:
				case 45:
				case 46:
				case 47:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 56:
				case 57:
				case 58:
				case 59:
				case 60:
				case 61:
				case 62:
				case 63:
				case 64:
				case 65:
				case 66:
				case 67:
				case 68:
				case 69:
				case 71:
				case 72:
				case 73:
					{
					alt26 = 5;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 26, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case STRING:
				{
				alt26 = 6;
				}
				break;
			case INT:
				{
				alt26 = 7;
				}
				break;
			case 41:
				{
				alt26 = 8;
				}
				break;
			case 55:
				{
				alt26 = 9;
				}
				break;
			case PREFIXED_STRING:
				{
				alt26 = 10;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:163:4: ID ( '(' arglist_expr ')' )
				{
				DebugLocation(163, 4);
				ID59=(IToken)Match(input,ID,Follow._ID_in_postfix_expr985);  
				stream_ID.Add(ID59);

				DebugLocation(163, 7);
				// Queries\\PomonaQuery.g:163:7: ( '(' arglist_expr ')' )
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:163:9: '(' arglist_expr ')'
				{
				DebugLocation(163, 9);
				char_literal60=(IToken)Match(input,41,Follow._41_in_postfix_expr989);  
				stream_41.Add(char_literal60);

				DebugLocation(163, 13);
				PushFollow(Follow._arglist_expr_in_postfix_expr991);
				arglist_expr61=arglist_expr();
				PopFollow();

				stream_arglist_expr.Add(arglist_expr61.Tree);
				DebugLocation(163, 26);
				char_literal62=(IToken)Match(input,42,Follow._42_in_postfix_expr993);  
				stream_42.Add(char_literal62);


				}



				{
				// AST REWRITE
				// elements: ID, arglist_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 163:32: -> ^( METHOD_CALL ID arglist_expr )
				{
					DebugLocation(163, 35);
					// Queries\\PomonaQuery.g:163:35: ^( METHOD_CALL ID arglist_expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(163, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

					DebugLocation(163, 49);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(163, 52);
					adaptor.AddChild(root_1, stream_arglist_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:164:4: ID ( '(' ')' )
				{
				DebugLocation(164, 4);
				ID63=(IToken)Match(input,ID,Follow._ID_in_postfix_expr1010);  
				stream_ID.Add(ID63);

				DebugLocation(164, 7);
				// Queries\\PomonaQuery.g:164:7: ( '(' ')' )
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:164:9: '(' ')'
				{
				DebugLocation(164, 9);
				char_literal64=(IToken)Match(input,41,Follow._41_in_postfix_expr1014);  
				stream_41.Add(char_literal64);

				DebugLocation(164, 13);
				char_literal65=(IToken)Match(input,42,Follow._42_in_postfix_expr1016);  
				stream_42.Add(char_literal65);


				}



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 164:19: -> ^( METHOD_CALL ID )
				{
					DebugLocation(164, 22);
					// Queries\\PomonaQuery.g:164:22: ^( METHOD_CALL ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(164, 24);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

					DebugLocation(164, 36);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Queries\\PomonaQuery.g:165:4: ID ( '[' arglist_expr ']' )
				{
				DebugLocation(165, 4);
				ID66=(IToken)Match(input,ID,Follow._ID_in_postfix_expr1031);  
				stream_ID.Add(ID66);

				DebugLocation(165, 7);
				// Queries\\PomonaQuery.g:165:7: ( '[' arglist_expr ']' )
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:165:9: '[' arglist_expr ']'
				{
				DebugLocation(165, 9);
				char_literal67=(IToken)Match(input,55,Follow._55_in_postfix_expr1035);  
				stream_55.Add(char_literal67);

				DebugLocation(165, 13);
				PushFollow(Follow._arglist_expr_in_postfix_expr1037);
				arglist_expr68=arglist_expr();
				PopFollow();

				stream_arglist_expr.Add(arglist_expr68.Tree);
				DebugLocation(165, 26);
				char_literal69=(IToken)Match(input,56,Follow._56_in_postfix_expr1039);  
				stream_56.Add(char_literal69);


				}



				{
				// AST REWRITE
				// elements: ID, arglist_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 165:32: -> ^( INDEXER_ACCESS ID arglist_expr )
				{
					DebugLocation(165, 35);
					// Queries\\PomonaQuery.g:165:35: ^( INDEXER_ACCESS ID arglist_expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(165, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INDEXER_ACCESS, "INDEXER_ACCESS"), root_1);

					DebugLocation(165, 52);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(165, 55);
					adaptor.AddChild(root_1, stream_arglist_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Queries\\PomonaQuery.g:166:4: ID ( '[' ']' )
				{
				DebugLocation(166, 4);
				ID70=(IToken)Match(input,ID,Follow._ID_in_postfix_expr1056);  
				stream_ID.Add(ID70);

				DebugLocation(166, 7);
				// Queries\\PomonaQuery.g:166:7: ( '[' ']' )
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:166:9: '[' ']'
				{
				DebugLocation(166, 9);
				char_literal71=(IToken)Match(input,55,Follow._55_in_postfix_expr1060);  
				stream_55.Add(char_literal71);

				DebugLocation(166, 13);
				char_literal72=(IToken)Match(input,56,Follow._56_in_postfix_expr1062);  
				stream_56.Add(char_literal72);


				}



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 166:19: -> ^( INDEXER_ACCESS ID )
				{
					DebugLocation(166, 22);
					// Queries\\PomonaQuery.g:166:22: ^( INDEXER_ACCESS ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(166, 24);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INDEXER_ACCESS, "INDEXER_ACCESS"), root_1);

					DebugLocation(166, 39);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Queries\\PomonaQuery.g:167:4: ID
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(167, 4);
				ID73=(IToken)Match(input,ID,Follow._ID_in_postfix_expr1077); 
				ID73_tree = (object)adaptor.Create(ID73);
				adaptor.AddChild(root_0, ID73_tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Queries\\PomonaQuery.g:168:4: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(168, 4);
				STRING74=(IToken)Match(input,STRING,Follow._STRING_in_postfix_expr1082); 
				STRING74_tree = (object)adaptor.Create(STRING74);
				adaptor.AddChild(root_0, STRING74_tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Queries\\PomonaQuery.g:169:4: INT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(169, 4);
				INT75=(IToken)Match(input,INT,Follow._INT_in_postfix_expr1087); 
				INT75_tree = (object)adaptor.Create(INT75);
				adaptor.AddChild(root_0, INT75_tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Queries\\PomonaQuery.g:170:4: '(' ! exp ')' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(170, 7);
				char_literal76=(IToken)Match(input,41,Follow._41_in_postfix_expr1092); 
				DebugLocation(170, 9);
				PushFollow(Follow._exp_in_postfix_expr1095);
				exp77=exp();
				PopFollow();

				adaptor.AddChild(root_0, exp77.Tree);
				DebugLocation(170, 16);
				char_literal78=(IToken)Match(input,42,Follow._42_in_postfix_expr1097); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Queries\\PomonaQuery.g:171:4: '[' arglist_expr ']'
				{
				DebugLocation(171, 4);
				char_literal79=(IToken)Match(input,55,Follow._55_in_postfix_expr1103);  
				stream_55.Add(char_literal79);

				DebugLocation(171, 8);
				PushFollow(Follow._arglist_expr_in_postfix_expr1105);
				arglist_expr80=arglist_expr();
				PopFollow();

				stream_arglist_expr.Add(arglist_expr80.Tree);
				DebugLocation(171, 21);
				char_literal81=(IToken)Match(input,56,Follow._56_in_postfix_expr1107);  
				stream_56.Add(char_literal81);



				{
				// AST REWRITE
				// elements: arglist_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 171:25: -> ^( ARRAY_LITERAL arglist_expr )
				{
					DebugLocation(171, 28);
					// Queries\\PomonaQuery.g:171:28: ^( ARRAY_LITERAL arglist_expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(171, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

					DebugLocation(171, 44);
					adaptor.AddChild(root_1, stream_arglist_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Queries\\PomonaQuery.g:172:4: PREFIXED_STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(172, 4);
				PREFIXED_STRING82=(IToken)Match(input,PREFIXED_STRING,Follow._PREFIXED_STRING_in_postfix_expr1120); 
				PREFIXED_STRING82_tree = (object)adaptor.Create(PREFIXED_STRING82);
				adaptor.AddChild(root_0, PREFIXED_STRING82_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfix_expr", 18);
			LeaveRule("postfix_expr", 18);
			LeaveRule_postfix_expr();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "postfix_expr"); }
		return retval;

	}
	// $ANTLR end "postfix_expr"

	partial void EnterRule_arglist_expr();
	partial void LeaveRule_arglist_expr();
	// $ANTLR start "arglist_expr"
	// Queries\\PomonaQuery.g:175:1: arglist_expr : exp ( ',' ! exp )* ;
	[GrammarRule("arglist_expr")]
	private AstParserRuleReturnScope<object, IToken> arglist_expr()
	{
		EnterRule_arglist_expr();
		EnterRule("arglist_expr", 19);
		TraceIn("arglist_expr", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal84 = default(IToken);
		AstParserRuleReturnScope<object, IToken> exp83 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> exp85 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal84_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arglist_expr");
		DebugLocation(175, 1);
		try
		{
			// Queries\\PomonaQuery.g:176:2: ( exp ( ',' ! exp )* )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:176:4: exp ( ',' ! exp )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(176, 4);
			PushFollow(Follow._exp_in_arglist_expr1132);
			exp83=exp();
			PopFollow();

			adaptor.AddChild(root_0, exp83.Tree);
			DebugLocation(176, 8);
			// Queries\\PomonaQuery.g:176:8: ( ',' ! exp )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==45))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:176:10: ',' ! exp
					{
					DebugLocation(176, 13);
					char_literal84=(IToken)Match(input,45,Follow._45_in_arglist_expr1136); 
					DebugLocation(176, 15);
					PushFollow(Follow._exp_in_arglist_expr1139);
					exp85=exp();
					PopFollow();

					adaptor.AddChild(root_0, exp85.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arglist_expr", 19);
			LeaveRule("arglist_expr", 19);
			LeaveRule_arglist_expr();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "arglist_expr"); }
		return retval;

	}
	// $ANTLR end "arglist_expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _exp_in_parse478 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse480 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _as_expression_in_exp499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expression_in_as_expression510 = new BitSet(new ulong[]{0x800000000000002UL});
		public static readonly BitSet _59_in_as_expression514 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _lambda_expression_in_as_expression516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expression_in_lambda_expression539 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _49_in_lambda_expression543 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _or_expression_in_lambda_expression545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expression_in_or_expression568 = new BitSet(new ulong[]{0x2UL,0x280UL});
		public static readonly BitSet _71_in_or_expression573 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _73_in_or_expression575 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _and_expression_in_or_expression578 = new BitSet(new ulong[]{0x2UL,0x280UL});
		public static readonly BitSet _relational_expr_in_and_expression617 = new BitSet(new ulong[]{0x400010000000002UL});
		public static readonly BitSet _and_operator_in_and_expression621 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _relational_expr_in_and_expression623 = new BitSet(new ulong[]{0x400010000000002UL});
		public static readonly BitSet _63_in_relational_operator650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_relational_operator652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_relational_operator663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_relational_operator665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_relational_operator676 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_relational_operator678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _62_in_relational_operator689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_relational_operator691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_relational_operator702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_relational_operator704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_relational_operator715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _38_in_relational_operator717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _64_in_relational_operator727 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additive_expr_in_relational_expr744 = new BitSet(new ulong[]{0xE07C004000000002UL,0x27UL});
		public static readonly BitSet _relational_operator_in_relational_expr747 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _additive_expr_in_relational_expr750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_additive_operator767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_additive_operator769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_additive_operator783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_additive_operator785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicative_expr_in_additive_expr805 = new BitSet(new ulong[]{0x200500000000002UL,0x100UL});
		public static readonly BitSet _additive_operator_in_additive_expr809 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _multiplicative_expr_in_additive_expr812 = new BitSet(new ulong[]{0x200500000000002UL,0x100UL});
		public static readonly BitSet _68_in_multiplicative_operator832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_multiplicative_operator834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _60_in_multiplicative_operator850 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _48_in_multiplicative_operator852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_multiplicative_operator865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _39_in_multiplicative_operator867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expr_in_multiplicative_expr887 = new BitSet(new ulong[]{0x1001088000000002UL,0x18UL});
		public static readonly BitSet _multiplicative_operator_in_multiplicative_expr891 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _unary_expr_in_multiplicative_expr894 = new BitSet(new ulong[]{0x1001088000000002UL,0x18UL});
		public static readonly BitSet _70_in_unary_operator910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _37_in_unary_operator912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_dot_operator928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_unary_expr945 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _unary_expr_in_unary_expr948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expr_in_unary_expr953 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expr_in_primary_expr964 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _dot_operator_in_primary_expr968 = new BitSet(new ulong[]{0x800202800A0000UL});
		public static readonly BitSet _postfix_expr_in_primary_expr971 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _ID_in_postfix_expr985 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_postfix_expr989 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _arglist_expr_in_postfix_expr991 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_postfix_expr993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_postfix_expr1010 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _41_in_postfix_expr1014 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_postfix_expr1016 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_postfix_expr1031 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_postfix_expr1035 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _arglist_expr_in_postfix_expr1037 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_postfix_expr1039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_postfix_expr1056 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _55_in_postfix_expr1060 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_postfix_expr1062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_postfix_expr1077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_postfix_expr1082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_postfix_expr1087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_postfix_expr1092 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _exp_in_postfix_expr1095 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _42_in_postfix_expr1097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_postfix_expr1103 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _arglist_expr_in_postfix_expr1105 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _56_in_postfix_expr1107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PREFIXED_STRING_in_postfix_expr1120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exp_in_arglist_expr1132 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _45_in_arglist_expr1136 = new BitSet(new ulong[]{0x800222800A0000UL,0x40UL});
		public static readonly BitSet _exp_in_arglist_expr1139 = new BitSet(new ulong[]{0x200000000002UL});
	}
	#endregion Follow sets
}

} // namespace  Pomona.Queries 
