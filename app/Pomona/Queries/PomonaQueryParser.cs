//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 Queries\\PomonaQuery.g

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Pomona.Queries 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PomonaQueryParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ADD_OP", "AND_OP", "ARRAY_LITERAL", "AS_OP", "DATETIME_LITERAL", "DIV_OP", "DOT_OP", "EQ_OP", "ESC_SEQ", "GE_OP", "GT_OP", "GUID_LITERAL", "HEX_DIGIT", "ID", "IEQ_OP", "INDEXER_ACCESS", "INT", "IN_OP", "LAMBDA_OP", "LE_OP", "LT_OP", "METHOD_CALL", "MOD_OP", "MUL_OP", "NE_OP", "NOT_OP", "OCTAL_ESC", "ORDERBY_ASC", "ORDERBY_DESC", "OR_OP", "PREFIXED_STRING", "ROOT", "STRING", "SUB_OP", "UNICODE_ESC", "WS", "'!'", "'!='", "'%'", "'&&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "':'", "'<'", "'<='", "'=='", "'>'", "'>='", "'['", "']'", "'add'", "'and'", "'as'", "'asc'", "'desc'", "'div'", "'eq'", "'ge'", "'gt'", "'ieq'", "'in'", "'le'", "'lt'", "'mod'", "'mul'", "'ne'", "'not'", "'or'", "'sub'", "'||'"
	};
	public const int EOF=-1;
	public const int ADD_OP=4;
	public const int AND_OP=5;
	public const int ARRAY_LITERAL=6;
	public const int AS_OP=7;
	public const int DATETIME_LITERAL=8;
	public const int DIV_OP=9;
	public const int DOT_OP=10;
	public const int EQ_OP=11;
	public const int ESC_SEQ=12;
	public const int GE_OP=13;
	public const int GT_OP=14;
	public const int GUID_LITERAL=15;
	public const int HEX_DIGIT=16;
	public const int ID=17;
	public const int IEQ_OP=18;
	public const int INDEXER_ACCESS=19;
	public const int INT=20;
	public const int IN_OP=21;
	public const int LAMBDA_OP=22;
	public const int LE_OP=23;
	public const int LT_OP=24;
	public const int METHOD_CALL=25;
	public const int MOD_OP=26;
	public const int MUL_OP=27;
	public const int NE_OP=28;
	public const int NOT_OP=29;
	public const int OCTAL_ESC=30;
	public const int ORDERBY_ASC=31;
	public const int ORDERBY_DESC=32;
	public const int OR_OP=33;
	public const int PREFIXED_STRING=34;
	public const int ROOT=35;
	public const int STRING=36;
	public const int SUB_OP=37;
	public const int UNICODE_ESC=38;
	public const int WS=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;

	public PomonaQueryParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public PomonaQueryParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return PomonaQueryParser.tokenNames; } }
	public override string GrammarFileName { get { return "Queries\\PomonaQuery.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_parse();
	partial void LeaveRule_parse();
	// $ANTLR start "parse"
	// Queries\\PomonaQuery.g:78:8: public parse : arglist_expr EOF -> ^( ROOT arglist_expr ) ;
	[GrammarRule("parse")]
	public AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arglist_expr1 = default(AstParserRuleReturnScope<object, IToken>);

		object EOF2_tree = default(object);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_arglist_expr=new RewriteRuleSubtreeStream(adaptor,"rule arglist_expr");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(78, 1);
		try
		{
			// Queries\\PomonaQuery.g:79:2: ( arglist_expr EOF -> ^( ROOT arglist_expr ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:79:4: arglist_expr EOF
			{
			DebugLocation(79, 4);
			PushFollow(Follow._arglist_expr_in_parse509);
			arglist_expr1=arglist_expr();
			PopFollow();

			stream_arglist_expr.Add(arglist_expr1.Tree);
			DebugLocation(79, 17);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_parse511);  
			stream_EOF.Add(EOF2);



			{
			// AST REWRITE
			// elements: arglist_expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 79:21: -> ^( ROOT arglist_expr )
			{
				DebugLocation(79, 24);
				// Queries\\PomonaQuery.g:79:24: ^( ROOT arglist_expr )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(79, 26);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ROOT, "ROOT"), root_1);

				DebugLocation(79, 31);
				adaptor.AddChild(root_1, stream_arglist_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
		}
		DebugLocation(80, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"

	partial void EnterRule_exp();
	partial void LeaveRule_exp();
	// $ANTLR start "exp"
	// Queries\\PomonaQuery.g:82:1: exp : as_expression ;
	[GrammarRule("exp")]
	private AstParserRuleReturnScope<object, IToken> exp()
	{
		EnterRule_exp();
		EnterRule("exp", 2);
		TraceIn("exp", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> as_expression3 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "exp");
		DebugLocation(82, 1);
		try
		{
			// Queries\\PomonaQuery.g:83:2: ( as_expression )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:83:4: as_expression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(83, 4);
			PushFollow(Follow._as_expression_in_exp530);
			as_expression3=as_expression();
			PopFollow();

			adaptor.AddChild(root_0, as_expression3.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exp", 2);
			LeaveRule("exp", 2);
			LeaveRule_exp();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "exp"); }
		return retval;

	}
	// $ANTLR end "exp"

	partial void EnterRule_as_expression();
	partial void LeaveRule_as_expression();
	// $ANTLR start "as_expression"
	// Queries\\PomonaQuery.g:86:1: as_expression : lambda_expression ( 'as' lambda_expression )? -> ^( AS_OP ( lambda_expression )+ ) ;
	[GrammarRule("as_expression")]
	private AstParserRuleReturnScope<object, IToken> as_expression()
	{
		EnterRule_as_expression();
		EnterRule("as_expression", 3);
		TraceIn("as_expression", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal5 = default(IToken);
		AstParserRuleReturnScope<object, IToken> lambda_expression4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> lambda_expression6 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal5_tree = default(object);
		RewriteRuleITokenStream stream_62=new RewriteRuleITokenStream(adaptor,"token 62");
		RewriteRuleSubtreeStream stream_lambda_expression=new RewriteRuleSubtreeStream(adaptor,"rule lambda_expression");
		try { DebugEnterRule(GrammarFileName, "as_expression");
		DebugLocation(86, 1);
		try
		{
			// Queries\\PomonaQuery.g:87:2: ( lambda_expression ( 'as' lambda_expression )? -> ^( AS_OP ( lambda_expression )+ ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:87:4: lambda_expression ( 'as' lambda_expression )?
			{
			DebugLocation(87, 4);
			PushFollow(Follow._lambda_expression_in_as_expression541);
			lambda_expression4=lambda_expression();
			PopFollow();

			stream_lambda_expression.Add(lambda_expression4.Tree);
			DebugLocation(87, 22);
			// Queries\\PomonaQuery.g:87:22: ( 'as' lambda_expression )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==62))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:87:24: 'as' lambda_expression
				{
				DebugLocation(87, 24);
				string_literal5=(IToken)Match(input,62,Follow._62_in_as_expression545);  
				stream_62.Add(string_literal5);

				DebugLocation(87, 29);
				PushFollow(Follow._lambda_expression_in_as_expression547);
				lambda_expression6=lambda_expression();
				PopFollow();

				stream_lambda_expression.Add(lambda_expression6.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }



			{
			// AST REWRITE
			// elements: lambda_expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 87:50: -> ^( AS_OP ( lambda_expression )+ )
			{
				DebugLocation(87, 53);
				// Queries\\PomonaQuery.g:87:53: ^( AS_OP ( lambda_expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(87, 55);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(AS_OP, "AS_OP"), root_1);

				DebugLocation(87, 61);
				if (!(stream_lambda_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_lambda_expression.HasNext )
				{
					DebugLocation(87, 61);
					adaptor.AddChild(root_1, stream_lambda_expression.NextTree());

				}
				stream_lambda_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("as_expression", 3);
			LeaveRule("as_expression", 3);
			LeaveRule_as_expression();
		}
		DebugLocation(88, 1);
		} finally { DebugExitRule(GrammarFileName, "as_expression"); }
		return retval;

	}
	// $ANTLR end "as_expression"

	partial void EnterRule_lambda_expression();
	partial void LeaveRule_lambda_expression();
	// $ANTLR start "lambda_expression"
	// Queries\\PomonaQuery.g:90:1: lambda_expression : or_expression ( ':' or_expression )? -> ^( LAMBDA_OP ( or_expression )+ ) ;
	[GrammarRule("lambda_expression")]
	private AstParserRuleReturnScope<object, IToken> lambda_expression()
	{
		EnterRule_lambda_expression();
		EnterRule("lambda_expression", 4);
		TraceIn("lambda_expression", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal8 = default(IToken);
		AstParserRuleReturnScope<object, IToken> or_expression7 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> or_expression9 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal8_tree = default(object);
		RewriteRuleITokenStream stream_52=new RewriteRuleITokenStream(adaptor,"token 52");
		RewriteRuleSubtreeStream stream_or_expression=new RewriteRuleSubtreeStream(adaptor,"rule or_expression");
		try { DebugEnterRule(GrammarFileName, "lambda_expression");
		DebugLocation(90, 1);
		try
		{
			// Queries\\PomonaQuery.g:91:2: ( or_expression ( ':' or_expression )? -> ^( LAMBDA_OP ( or_expression )+ ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:91:4: or_expression ( ':' or_expression )?
			{
			DebugLocation(91, 4);
			PushFollow(Follow._or_expression_in_lambda_expression570);
			or_expression7=or_expression();
			PopFollow();

			stream_or_expression.Add(or_expression7.Tree);
			DebugLocation(91, 18);
			// Queries\\PomonaQuery.g:91:18: ( ':' or_expression )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==52))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:91:20: ':' or_expression
				{
				DebugLocation(91, 20);
				char_literal8=(IToken)Match(input,52,Follow._52_in_lambda_expression574);  
				stream_52.Add(char_literal8);

				DebugLocation(91, 24);
				PushFollow(Follow._or_expression_in_lambda_expression576);
				or_expression9=or_expression();
				PopFollow();

				stream_or_expression.Add(or_expression9.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }



			{
			// AST REWRITE
			// elements: or_expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 91:41: -> ^( LAMBDA_OP ( or_expression )+ )
			{
				DebugLocation(91, 44);
				// Queries\\PomonaQuery.g:91:44: ^( LAMBDA_OP ( or_expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(91, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(LAMBDA_OP, "LAMBDA_OP"), root_1);

				DebugLocation(91, 56);
				if (!(stream_or_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_or_expression.HasNext )
				{
					DebugLocation(91, 56);
					adaptor.AddChild(root_1, stream_or_expression.NextTree());

				}
				stream_or_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expression", 4);
			LeaveRule("lambda_expression", 4);
			LeaveRule_lambda_expression();
		}
		DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expression"); }
		return retval;

	}
	// $ANTLR end "lambda_expression"

	partial void EnterRule_or_expression();
	partial void LeaveRule_or_expression();
	// $ANTLR start "or_expression"
	// Queries\\PomonaQuery.g:94:1: or_expression : and_expression ( ( 'or' | '||' ) and_expression )* -> ^( OR_OP ( and_expression )+ ) ;
	[GrammarRule("or_expression")]
	private AstParserRuleReturnScope<object, IToken> or_expression()
	{
		EnterRule_or_expression();
		EnterRule("or_expression", 5);
		TraceIn("or_expression", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal11 = default(IToken);
		IToken string_literal12 = default(IToken);
		AstParserRuleReturnScope<object, IToken> and_expression10 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> and_expression13 = default(AstParserRuleReturnScope<object, IToken>);

		object string_literal11_tree = default(object);
		object string_literal12_tree = default(object);
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleSubtreeStream stream_and_expression=new RewriteRuleSubtreeStream(adaptor,"rule and_expression");
		try { DebugEnterRule(GrammarFileName, "or_expression");
		DebugLocation(94, 1);
		try
		{
			// Queries\\PomonaQuery.g:95:2: ( and_expression ( ( 'or' | '||' ) and_expression )* -> ^( OR_OP ( and_expression )+ ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:95:4: and_expression ( ( 'or' | '||' ) and_expression )*
			{
			DebugLocation(95, 4);
			PushFollow(Follow._and_expression_in_or_expression599);
			and_expression10=and_expression();
			PopFollow();

			stream_and_expression.Add(and_expression10.Tree);
			DebugLocation(95, 19);
			// Queries\\PomonaQuery.g:95:19: ( ( 'or' | '||' ) and_expression )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if ((LA4_1==77||LA4_1==79))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:95:21: ( 'or' | '||' ) and_expression
					{
					DebugLocation(95, 21);
					// Queries\\PomonaQuery.g:95:21: ( 'or' | '||' )
					int alt3=2;
					try { DebugEnterSubRule(3);
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if ((LA3_1==77))
					{
						alt3 = 1;
					}
					else if ((LA3_1==79))
					{
						alt3 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// Queries\\PomonaQuery.g:95:22: 'or'
						{
						DebugLocation(95, 22);
						string_literal11=(IToken)Match(input,77,Follow._77_in_or_expression604);  
						stream_77.Add(string_literal11);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Queries\\PomonaQuery.g:95:27: '||'
						{
						DebugLocation(95, 27);
						string_literal12=(IToken)Match(input,79,Follow._79_in_or_expression606);  
						stream_79.Add(string_literal12);


						}
						break;

					}
					} finally { DebugExitSubRule(3); }

					DebugLocation(95, 33);
					PushFollow(Follow._and_expression_in_or_expression609);
					and_expression13=and_expression();
					PopFollow();

					stream_and_expression.Add(and_expression13.Tree);

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }



			{
			// AST REWRITE
			// elements: and_expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 95:51: -> ^( OR_OP ( and_expression )+ )
			{
				DebugLocation(95, 54);
				// Queries\\PomonaQuery.g:95:54: ^( OR_OP ( and_expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(95, 56);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(OR_OP, "OR_OP"), root_1);

				DebugLocation(95, 62);
				if (!(stream_and_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_and_expression.HasNext )
				{
					DebugLocation(95, 62);
					adaptor.AddChild(root_1, stream_and_expression.NextTree());

				}
				stream_and_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expression", 5);
			LeaveRule("or_expression", 5);
			LeaveRule_or_expression();
		}
		DebugLocation(96, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expression"); }
		return retval;

	}
	// $ANTLR end "or_expression"

	partial void EnterRule_and_operator();
	partial void LeaveRule_and_operator();
	// $ANTLR start "and_operator"
	// Queries\\PomonaQuery.g:98:1: and_operator : ( 'and' | '&&' ) ;
	[GrammarRule("and_operator")]
	private AstParserRuleReturnScope<object, IToken> and_operator()
	{
		EnterRule_and_operator();
		EnterRule("and_operator", 6);
		TraceIn("and_operator", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set14 = default(IToken);

		object set14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "and_operator");
		DebugLocation(98, 15);
		try
		{
			// Queries\\PomonaQuery.g:99:2: ( ( 'and' | '&&' ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(99, 2);

			set14=(IToken)input.LT(1);
			if (input.LA(1)==43||input.LA(1)==61)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set14));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_operator", 6);
			LeaveRule("and_operator", 6);
			LeaveRule_and_operator();
		}
		DebugLocation(99, 15);
		} finally { DebugExitRule(GrammarFileName, "and_operator"); }
		return retval;

	}
	// $ANTLR end "and_operator"

	partial void EnterRule_and_expression();
	partial void LeaveRule_and_expression();
	// $ANTLR start "and_expression"
	// Queries\\PomonaQuery.g:102:1: and_expression : relational_expr ( and_operator relational_expr )* -> ^( AND_OP ( relational_expr )+ ) ;
	[GrammarRule("and_expression")]
	private AstParserRuleReturnScope<object, IToken> and_expression()
	{
		EnterRule_and_expression();
		EnterRule("and_expression", 7);
		TraceIn("and_expression", 7);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> relational_expr15 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> and_operator16 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relational_expr17 = default(AstParserRuleReturnScope<object, IToken>);

		RewriteRuleSubtreeStream stream_relational_expr=new RewriteRuleSubtreeStream(adaptor,"rule relational_expr");
		RewriteRuleSubtreeStream stream_and_operator=new RewriteRuleSubtreeStream(adaptor,"rule and_operator");
		try { DebugEnterRule(GrammarFileName, "and_expression");
		DebugLocation(102, 1);
		try
		{
			// Queries\\PomonaQuery.g:103:2: ( relational_expr ( and_operator relational_expr )* -> ^( AND_OP ( relational_expr )+ ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:103:4: relational_expr ( and_operator relational_expr )*
			{
			DebugLocation(103, 4);
			PushFollow(Follow._relational_expr_in_and_expression648);
			relational_expr15=relational_expr();
			PopFollow();

			stream_relational_expr.Add(relational_expr15.Tree);
			DebugLocation(103, 20);
			// Queries\\PomonaQuery.g:103:20: ( and_operator relational_expr )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==43||LA5_1==61))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:103:22: and_operator relational_expr
					{
					DebugLocation(103, 22);
					PushFollow(Follow._and_operator_in_and_expression652);
					and_operator16=and_operator();
					PopFollow();

					stream_and_operator.Add(and_operator16.Tree);
					DebugLocation(103, 35);
					PushFollow(Follow._relational_expr_in_and_expression654);
					relational_expr17=relational_expr();
					PopFollow();

					stream_relational_expr.Add(relational_expr17.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }



			{
			// AST REWRITE
			// elements: relational_expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 103:54: -> ^( AND_OP ( relational_expr )+ )
			{
				DebugLocation(103, 57);
				// Queries\\PomonaQuery.g:103:57: ^( AND_OP ( relational_expr )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(103, 59);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(AND_OP, "AND_OP"), root_1);

				DebugLocation(103, 66);
				if (!(stream_relational_expr.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_relational_expr.HasNext )
				{
					DebugLocation(103, 66);
					adaptor.AddChild(root_1, stream_relational_expr.NextTree());

				}
				stream_relational_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expression", 7);
			LeaveRule("and_expression", 7);
			LeaveRule_and_expression();
		}
		DebugLocation(104, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expression"); }
		return retval;

	}
	// $ANTLR end "and_expression"

	partial void EnterRule_relational_operator();
	partial void LeaveRule_relational_operator();
	// $ANTLR start "relational_operator"
	// Queries\\PomonaQuery.g:108:1: relational_operator : ( ( 'gt' | '>' ) -> GT_OP | ( 'lt' | '<' ) -> LT_OP | ( 'eq' | '==' ) -> EQ_OP | ( 'ge' | '>=' ) -> GE_OP | ( 'le' | '<=' ) -> LE_OP | ( 'ne' | '!=' ) -> NE_OP | 'in' -> IN_OP | 'ieq' -> IEQ_OP );
	[GrammarRule("relational_operator")]
	private AstParserRuleReturnScope<object, IToken> relational_operator()
	{
		EnterRule_relational_operator();
		EnterRule("relational_operator", 8);
		TraceIn("relational_operator", 8);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal18 = default(IToken);
		IToken char_literal19 = default(IToken);
		IToken string_literal20 = default(IToken);
		IToken char_literal21 = default(IToken);
		IToken string_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken string_literal24 = default(IToken);
		IToken string_literal25 = default(IToken);
		IToken string_literal26 = default(IToken);
		IToken string_literal27 = default(IToken);
		IToken string_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken string_literal30 = default(IToken);
		IToken string_literal31 = default(IToken);

		object string_literal18_tree = default(object);
		object char_literal19_tree = default(object);
		object string_literal20_tree = default(object);
		object char_literal21_tree = default(object);
		object string_literal22_tree = default(object);
		object string_literal23_tree = default(object);
		object string_literal24_tree = default(object);
		object string_literal25_tree = default(object);
		object string_literal26_tree = default(object);
		object string_literal27_tree = default(object);
		object string_literal28_tree = default(object);
		object string_literal29_tree = default(object);
		object string_literal30_tree = default(object);
		object string_literal31_tree = default(object);
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_53=new RewriteRuleITokenStream(adaptor,"token 53");
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_55=new RewriteRuleITokenStream(adaptor,"token 55");
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_41=new RewriteRuleITokenStream(adaptor,"token 41");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_69=new RewriteRuleITokenStream(adaptor,"token 69");
		try { DebugEnterRule(GrammarFileName, "relational_operator");
		DebugLocation(108, 1);
		try
		{
			// Queries\\PomonaQuery.g:109:2: ( ( 'gt' | '>' ) -> GT_OP | ( 'lt' | '<' ) -> LT_OP | ( 'eq' | '==' ) -> EQ_OP | ( 'ge' | '>=' ) -> GE_OP | ( 'le' | '<=' ) -> LE_OP | ( 'ne' | '!=' ) -> NE_OP | 'in' -> IN_OP | 'ieq' -> IEQ_OP )
			int alt12=8;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case 56:
			case 68:
				{
				alt12 = 1;
				}
				break;
			case 53:
			case 72:
				{
				alt12 = 2;
				}
				break;
			case 55:
			case 66:
				{
				alt12 = 3;
				}
				break;
			case 57:
			case 67:
				{
				alt12 = 4;
				}
				break;
			case 54:
			case 71:
				{
				alt12 = 5;
				}
				break;
			case 41:
			case 75:
				{
				alt12 = 6;
				}
				break;
			case 70:
				{
				alt12 = 7;
				}
				break;
			case 69:
				{
				alt12 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:109:4: ( 'gt' | '>' )
				{
				DebugLocation(109, 4);
				// Queries\\PomonaQuery.g:109:4: ( 'gt' | '>' )
				int alt6=2;
				try { DebugEnterSubRule(6);
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==68))
				{
					alt6 = 1;
				}
				else if ((LA6_1==56))
				{
					alt6 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(6); }
				switch (alt6)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:109:5: 'gt'
					{
					DebugLocation(109, 5);
					string_literal18=(IToken)Match(input,68,Follow._68_in_relational_operator681);  
					stream_68.Add(string_literal18);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:109:10: '>'
					{
					DebugLocation(109, 10);
					char_literal19=(IToken)Match(input,56,Follow._56_in_relational_operator683);  
					stream_56.Add(char_literal19);


					}
					break;

				}
				} finally { DebugExitSubRule(6); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 109:15: -> GT_OP
				{
					DebugLocation(109, 18);
					adaptor.AddChild(root_0, (object)adaptor.Create(GT_OP, "GT_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:110:4: ( 'lt' | '<' )
				{
				DebugLocation(110, 4);
				// Queries\\PomonaQuery.g:110:4: ( 'lt' | '<' )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==72))
				{
					alt7 = 1;
				}
				else if ((LA7_1==53))
				{
					alt7 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:110:5: 'lt'
					{
					DebugLocation(110, 5);
					string_literal20=(IToken)Match(input,72,Follow._72_in_relational_operator694);  
					stream_72.Add(string_literal20);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:110:10: '<'
					{
					DebugLocation(110, 10);
					char_literal21=(IToken)Match(input,53,Follow._53_in_relational_operator696);  
					stream_53.Add(char_literal21);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 110:15: -> LT_OP
				{
					DebugLocation(110, 18);
					adaptor.AddChild(root_0, (object)adaptor.Create(LT_OP, "LT_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Queries\\PomonaQuery.g:111:4: ( 'eq' | '==' )
				{
				DebugLocation(111, 4);
				// Queries\\PomonaQuery.g:111:4: ( 'eq' | '==' )
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1==66))
				{
					alt8 = 1;
				}
				else if ((LA8_1==55))
				{
					alt8 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:111:5: 'eq'
					{
					DebugLocation(111, 5);
					string_literal22=(IToken)Match(input,66,Follow._66_in_relational_operator707);  
					stream_66.Add(string_literal22);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:111:10: '=='
					{
					DebugLocation(111, 10);
					string_literal23=(IToken)Match(input,55,Follow._55_in_relational_operator709);  
					stream_55.Add(string_literal23);


					}
					break;

				}
				} finally { DebugExitSubRule(8); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 111:16: -> EQ_OP
				{
					DebugLocation(111, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(EQ_OP, "EQ_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Queries\\PomonaQuery.g:112:4: ( 'ge' | '>=' )
				{
				DebugLocation(112, 4);
				// Queries\\PomonaQuery.g:112:4: ( 'ge' | '>=' )
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==67))
				{
					alt9 = 1;
				}
				else if ((LA9_1==57))
				{
					alt9 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:112:5: 'ge'
					{
					DebugLocation(112, 5);
					string_literal24=(IToken)Match(input,67,Follow._67_in_relational_operator720);  
					stream_67.Add(string_literal24);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:112:10: '>='
					{
					DebugLocation(112, 10);
					string_literal25=(IToken)Match(input,57,Follow._57_in_relational_operator722);  
					stream_57.Add(string_literal25);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 112:16: -> GE_OP
				{
					DebugLocation(112, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(GE_OP, "GE_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Queries\\PomonaQuery.g:113:4: ( 'le' | '<=' )
				{
				DebugLocation(113, 4);
				// Queries\\PomonaQuery.g:113:4: ( 'le' | '<=' )
				int alt10=2;
				try { DebugEnterSubRule(10);
				try { DebugEnterDecision(10, false);
				int LA10_1 = input.LA(1);

				if ((LA10_1==71))
				{
					alt10 = 1;
				}
				else if ((LA10_1==54))
				{
					alt10 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:113:5: 'le'
					{
					DebugLocation(113, 5);
					string_literal26=(IToken)Match(input,71,Follow._71_in_relational_operator733);  
					stream_71.Add(string_literal26);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:113:10: '<='
					{
					DebugLocation(113, 10);
					string_literal27=(IToken)Match(input,54,Follow._54_in_relational_operator735);  
					stream_54.Add(string_literal27);


					}
					break;

				}
				} finally { DebugExitSubRule(10); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 113:16: -> LE_OP
				{
					DebugLocation(113, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(LE_OP, "LE_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Queries\\PomonaQuery.g:114:4: ( 'ne' | '!=' )
				{
				DebugLocation(114, 4);
				// Queries\\PomonaQuery.g:114:4: ( 'ne' | '!=' )
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==75))
				{
					alt11 = 1;
				}
				else if ((LA11_1==41))
				{
					alt11 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:114:5: 'ne'
					{
					DebugLocation(114, 5);
					string_literal28=(IToken)Match(input,75,Follow._75_in_relational_operator746);  
					stream_75.Add(string_literal28);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:114:10: '!='
					{
					DebugLocation(114, 10);
					string_literal29=(IToken)Match(input,41,Follow._41_in_relational_operator748);  
					stream_41.Add(string_literal29);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 114:16: -> NE_OP
				{
					DebugLocation(114, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(NE_OP, "NE_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Queries\\PomonaQuery.g:115:4: 'in'
				{
				DebugLocation(115, 4);
				string_literal30=(IToken)Match(input,70,Follow._70_in_relational_operator758);  
				stream_70.Add(string_literal30);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 115:9: -> IN_OP
				{
					DebugLocation(115, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(IN_OP, "IN_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Queries\\PomonaQuery.g:116:4: 'ieq'
				{
				DebugLocation(116, 4);
				string_literal31=(IToken)Match(input,69,Follow._69_in_relational_operator767);  
				stream_69.Add(string_literal31);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 116:10: -> IEQ_OP
				{
					DebugLocation(116, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(IEQ_OP, "IEQ_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_operator", 8);
			LeaveRule("relational_operator", 8);
			LeaveRule_relational_operator();
		}
		DebugLocation(117, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_operator"); }
		return retval;

	}
	// $ANTLR end "relational_operator"

	partial void EnterRule_relational_expr();
	partial void LeaveRule_relational_expr();
	// $ANTLR start "relational_expr"
	// Queries\\PomonaQuery.g:127:1: relational_expr : additive_expr ( relational_operator ^ additive_expr )? ;
	[GrammarRule("relational_expr")]
	private AstParserRuleReturnScope<object, IToken> relational_expr()
	{
		EnterRule_relational_expr();
		EnterRule("relational_expr", 9);
		TraceIn("relational_expr", 9);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> additive_expr32 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> relational_operator33 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> additive_expr34 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "relational_expr");
		DebugLocation(127, 1);
		try
		{
			// Queries\\PomonaQuery.g:128:2: ( additive_expr ( relational_operator ^ additive_expr )? )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:128:4: additive_expr ( relational_operator ^ additive_expr )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(128, 4);
			PushFollow(Follow._additive_expr_in_relational_expr784);
			additive_expr32=additive_expr();
			PopFollow();

			adaptor.AddChild(root_0, additive_expr32.Tree);
			DebugLocation(128, 18);
			// Queries\\PomonaQuery.g:128:18: ( relational_operator ^ additive_expr )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==41||(LA13_1>=53 && LA13_1<=57)||(LA13_1>=66 && LA13_1<=72)||LA13_1==75))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:128:19: relational_operator ^ additive_expr
				{
				DebugLocation(128, 38);
				PushFollow(Follow._relational_operator_in_relational_expr787);
				relational_operator33=relational_operator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(relational_operator33.Tree, root_0);
				DebugLocation(128, 40);
				PushFollow(Follow._additive_expr_in_relational_expr790);
				additive_expr34=additive_expr();
				PopFollow();

				adaptor.AddChild(root_0, additive_expr34.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("relational_expr", 9);
			LeaveRule("relational_expr", 9);
			LeaveRule_relational_expr();
		}
		DebugLocation(129, 1);
		} finally { DebugExitRule(GrammarFileName, "relational_expr"); }
		return retval;

	}
	// $ANTLR end "relational_expr"

	partial void EnterRule_additive_operator();
	partial void LeaveRule_additive_operator();
	// $ANTLR start "additive_operator"
	// Queries\\PomonaQuery.g:131:1: additive_operator : ( ( 'add' | '+' ) -> ADD_OP | ( 'sub' | '-' ) -> SUB_OP );
	[GrammarRule("additive_operator")]
	private AstParserRuleReturnScope<object, IToken> additive_operator()
	{
		EnterRule_additive_operator();
		EnterRule("additive_operator", 10);
		TraceIn("additive_operator", 10);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken string_literal37 = default(IToken);
		IToken char_literal38 = default(IToken);

		object string_literal35_tree = default(object);
		object char_literal36_tree = default(object);
		object string_literal37_tree = default(object);
		object char_literal38_tree = default(object);
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_47=new RewriteRuleITokenStream(adaptor,"token 47");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_49=new RewriteRuleITokenStream(adaptor,"token 49");
		try { DebugEnterRule(GrammarFileName, "additive_operator");
		DebugLocation(131, 4);
		try
		{
			// Queries\\PomonaQuery.g:132:5: ( ( 'add' | '+' ) -> ADD_OP | ( 'sub' | '-' ) -> SUB_OP )
			int alt16=2;
			try { DebugEnterDecision(16, false);
			int LA16_1 = input.LA(1);

			if ((LA16_1==47||LA16_1==60))
			{
				alt16 = 1;
			}
			else if ((LA16_1==49||LA16_1==78))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:132:7: ( 'add' | '+' )
				{
				DebugLocation(132, 7);
				// Queries\\PomonaQuery.g:132:7: ( 'add' | '+' )
				int alt14=2;
				try { DebugEnterSubRule(14);
				try { DebugEnterDecision(14, false);
				int LA14_1 = input.LA(1);

				if ((LA14_1==60))
				{
					alt14 = 1;
				}
				else if ((LA14_1==47))
				{
					alt14 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:132:8: 'add'
					{
					DebugLocation(132, 8);
					string_literal35=(IToken)Match(input,60,Follow._60_in_additive_operator807);  
					stream_60.Add(string_literal35);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:132:14: '+'
					{
					DebugLocation(132, 14);
					char_literal36=(IToken)Match(input,47,Follow._47_in_additive_operator809);  
					stream_47.Add(char_literal36);


					}
					break;

				}
				} finally { DebugExitSubRule(14); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 132:19: -> ADD_OP
				{
					DebugLocation(132, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(ADD_OP, "ADD_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:133:7: ( 'sub' | '-' )
				{
				DebugLocation(133, 7);
				// Queries\\PomonaQuery.g:133:7: ( 'sub' | '-' )
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_1 = input.LA(1);

				if ((LA15_1==78))
				{
					alt15 = 1;
				}
				else if ((LA15_1==49))
				{
					alt15 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:133:8: 'sub'
					{
					DebugLocation(133, 8);
					string_literal37=(IToken)Match(input,78,Follow._78_in_additive_operator823);  
					stream_78.Add(string_literal37);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:133:14: '-'
					{
					DebugLocation(133, 14);
					char_literal38=(IToken)Match(input,49,Follow._49_in_additive_operator825);  
					stream_49.Add(char_literal38);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 133:19: -> SUB_OP
				{
					DebugLocation(133, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(SUB_OP, "SUB_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_operator", 10);
			LeaveRule("additive_operator", 10);
			LeaveRule_additive_operator();
		}
		DebugLocation(134, 4);
		} finally { DebugExitRule(GrammarFileName, "additive_operator"); }
		return retval;

	}
	// $ANTLR end "additive_operator"

	partial void EnterRule_additive_expr();
	partial void LeaveRule_additive_expr();
	// $ANTLR start "additive_expr"
	// Queries\\PomonaQuery.g:136:1: additive_expr : multiplicative_expr ( additive_operator ^ multiplicative_expr )* ;
	[GrammarRule("additive_expr")]
	private AstParserRuleReturnScope<object, IToken> additive_expr()
	{
		EnterRule_additive_expr();
		EnterRule("additive_expr", 11);
		TraceIn("additive_expr", 11);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> multiplicative_expr39 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> additive_operator40 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplicative_expr41 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "additive_expr");
		DebugLocation(136, 1);
		try
		{
			// Queries\\PomonaQuery.g:137:2: ( multiplicative_expr ( additive_operator ^ multiplicative_expr )* )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:137:4: multiplicative_expr ( additive_operator ^ multiplicative_expr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(137, 4);
			PushFollow(Follow._multiplicative_expr_in_additive_expr845);
			multiplicative_expr39=multiplicative_expr();
			PopFollow();

			adaptor.AddChild(root_0, multiplicative_expr39.Tree);
			DebugLocation(137, 24);
			// Queries\\PomonaQuery.g:137:24: ( additive_operator ^ multiplicative_expr )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==47||LA17_1==49||LA17_1==60||LA17_1==78))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:137:26: additive_operator ^ multiplicative_expr
					{
					DebugLocation(137, 43);
					PushFollow(Follow._additive_operator_in_additive_expr849);
					additive_operator40=additive_operator();
					PopFollow();

					root_0 = (object)adaptor.BecomeRoot(additive_operator40.Tree, root_0);
					DebugLocation(137, 45);
					PushFollow(Follow._multiplicative_expr_in_additive_expr852);
					multiplicative_expr41=multiplicative_expr();
					PopFollow();

					adaptor.AddChild(root_0, multiplicative_expr41.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("additive_expr", 11);
			LeaveRule("additive_expr", 11);
			LeaveRule_additive_expr();
		}
		DebugLocation(138, 1);
		} finally { DebugExitRule(GrammarFileName, "additive_expr"); }
		return retval;

	}
	// $ANTLR end "additive_expr"

	partial void EnterRule_multiplicative_operator();
	partial void LeaveRule_multiplicative_operator();
	// $ANTLR start "multiplicative_operator"
	// Queries\\PomonaQuery.g:140:1: multiplicative_operator : ( ( 'mul' | '*' ) -> MUL_OP | ( 'div' | '/' ) -> DIV_OP | ( 'mod' | '%' ) -> MOD_OP );
	[GrammarRule("multiplicative_operator")]
	private AstParserRuleReturnScope<object, IToken> multiplicative_operator()
	{
		EnterRule_multiplicative_operator();
		EnterRule("multiplicative_operator", 12);
		TraceIn("multiplicative_operator", 12);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal42 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken string_literal44 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken string_literal46 = default(IToken);
		IToken char_literal47 = default(IToken);

		object string_literal42_tree = default(object);
		object char_literal43_tree = default(object);
		object string_literal44_tree = default(object);
		object char_literal45_tree = default(object);
		object string_literal46_tree = default(object);
		object char_literal47_tree = default(object);
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_46=new RewriteRuleITokenStream(adaptor,"token 46");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleITokenStream stream_51=new RewriteRuleITokenStream(adaptor,"token 51");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleITokenStream stream_42=new RewriteRuleITokenStream(adaptor,"token 42");
		try { DebugEnterRule(GrammarFileName, "multiplicative_operator");
		DebugLocation(140, 4);
		try
		{
			// Queries\\PomonaQuery.g:141:5: ( ( 'mul' | '*' ) -> MUL_OP | ( 'div' | '/' ) -> DIV_OP | ( 'mod' | '%' ) -> MOD_OP )
			int alt21=3;
			try { DebugEnterDecision(21, false);
			switch (input.LA(1))
			{
			case 46:
			case 74:
				{
				alt21 = 1;
				}
				break;
			case 51:
			case 65:
				{
				alt21 = 2;
				}
				break;
			case 42:
			case 73:
				{
				alt21 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 21, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:141:9: ( 'mul' | '*' )
				{
				DebugLocation(141, 9);
				// Queries\\PomonaQuery.g:141:9: ( 'mul' | '*' )
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==74))
				{
					alt18 = 1;
				}
				else if ((LA18_1==46))
				{
					alt18 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:141:10: 'mul'
					{
					DebugLocation(141, 10);
					string_literal42=(IToken)Match(input,74,Follow._74_in_multiplicative_operator872);  
					stream_74.Add(string_literal42);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:141:16: '*'
					{
					DebugLocation(141, 16);
					char_literal43=(IToken)Match(input,46,Follow._46_in_multiplicative_operator874);  
					stream_46.Add(char_literal43);


					}
					break;

				}
				} finally { DebugExitSubRule(18); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 141:21: -> MUL_OP
				{
					DebugLocation(141, 24);
					adaptor.AddChild(root_0, (object)adaptor.Create(MUL_OP, "MUL_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:142:9: ( 'div' | '/' )
				{
				DebugLocation(142, 9);
				// Queries\\PomonaQuery.g:142:9: ( 'div' | '/' )
				int alt19=2;
				try { DebugEnterSubRule(19);
				try { DebugEnterDecision(19, false);
				int LA19_1 = input.LA(1);

				if ((LA19_1==65))
				{
					alt19 = 1;
				}
				else if ((LA19_1==51))
				{
					alt19 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:142:10: 'div'
					{
					DebugLocation(142, 10);
					string_literal44=(IToken)Match(input,65,Follow._65_in_multiplicative_operator890);  
					stream_65.Add(string_literal44);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:142:16: '/'
					{
					DebugLocation(142, 16);
					char_literal45=(IToken)Match(input,51,Follow._51_in_multiplicative_operator892);  
					stream_51.Add(char_literal45);


					}
					break;

				}
				} finally { DebugExitSubRule(19); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 142:21: -> DIV_OP
				{
					DebugLocation(142, 24);
					adaptor.AddChild(root_0, (object)adaptor.Create(DIV_OP, "DIV_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Queries\\PomonaQuery.g:143:6: ( 'mod' | '%' )
				{
				DebugLocation(143, 6);
				// Queries\\PomonaQuery.g:143:6: ( 'mod' | '%' )
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==73))
				{
					alt20 = 1;
				}
				else if ((LA20_1==42))
				{
					alt20 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 20, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:143:7: 'mod'
					{
					DebugLocation(143, 7);
					string_literal46=(IToken)Match(input,73,Follow._73_in_multiplicative_operator905);  
					stream_73.Add(string_literal46);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Queries\\PomonaQuery.g:143:13: '%'
					{
					DebugLocation(143, 13);
					char_literal47=(IToken)Match(input,42,Follow._42_in_multiplicative_operator907);  
					stream_42.Add(char_literal47);


					}
					break;

				}
				} finally { DebugExitSubRule(20); }



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 143:18: -> MOD_OP
				{
					DebugLocation(143, 21);
					adaptor.AddChild(root_0, (object)adaptor.Create(MOD_OP, "MOD_OP"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_operator", 12);
			LeaveRule("multiplicative_operator", 12);
			LeaveRule_multiplicative_operator();
		}
		DebugLocation(144, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_operator"); }
		return retval;

	}
	// $ANTLR end "multiplicative_operator"

	partial void EnterRule_multiplicative_expr();
	partial void LeaveRule_multiplicative_expr();
	// $ANTLR start "multiplicative_expr"
	// Queries\\PomonaQuery.g:146:1: multiplicative_expr : unary_expr ( multiplicative_operator ^ unary_expr )* ;
	[GrammarRule("multiplicative_expr")]
	private AstParserRuleReturnScope<object, IToken> multiplicative_expr()
	{
		EnterRule_multiplicative_expr();
		EnterRule("multiplicative_expr", 13);
		TraceIn("multiplicative_expr", 13);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> unary_expr48 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> multiplicative_operator49 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unary_expr50 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "multiplicative_expr");
		DebugLocation(146, 1);
		try
		{
			// Queries\\PomonaQuery.g:147:2: ( unary_expr ( multiplicative_operator ^ unary_expr )* )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:147:4: unary_expr ( multiplicative_operator ^ unary_expr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(147, 4);
			PushFollow(Follow._unary_expr_in_multiplicative_expr927);
			unary_expr48=unary_expr();
			PopFollow();

			adaptor.AddChild(root_0, unary_expr48.Tree);
			DebugLocation(147, 15);
			// Queries\\PomonaQuery.g:147:15: ( multiplicative_operator ^ unary_expr )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==42||LA22_1==46||LA22_1==51||LA22_1==65||(LA22_1>=73 && LA22_1<=74)))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:147:17: multiplicative_operator ^ unary_expr
					{
					DebugLocation(147, 40);
					PushFollow(Follow._multiplicative_operator_in_multiplicative_expr931);
					multiplicative_operator49=multiplicative_operator();
					PopFollow();

					root_0 = (object)adaptor.BecomeRoot(multiplicative_operator49.Tree, root_0);
					DebugLocation(147, 42);
					PushFollow(Follow._unary_expr_in_multiplicative_expr934);
					unary_expr50=unary_expr();
					PopFollow();

					adaptor.AddChild(root_0, unary_expr50.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("multiplicative_expr", 13);
			LeaveRule("multiplicative_expr", 13);
			LeaveRule_multiplicative_expr();
		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "multiplicative_expr"); }
		return retval;

	}
	// $ANTLR end "multiplicative_expr"

	partial void EnterRule_unary_operator();
	partial void LeaveRule_unary_operator();
	// $ANTLR start "unary_operator"
	// Queries\\PomonaQuery.g:150:1: unary_operator : ( 'not' | '!' ) -> NOT_OP ;
	[GrammarRule("unary_operator")]
	private AstParserRuleReturnScope<object, IToken> unary_operator()
	{
		EnterRule_unary_operator();
		EnterRule("unary_operator", 14);
		TraceIn("unary_operator", 14);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal51 = default(IToken);
		IToken char_literal52 = default(IToken);

		object string_literal51_tree = default(object);
		object char_literal52_tree = default(object);
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
		try { DebugEnterRule(GrammarFileName, "unary_operator");
		DebugLocation(150, 1);
		try
		{
			// Queries\\PomonaQuery.g:151:2: ( ( 'not' | '!' ) -> NOT_OP )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:151:4: ( 'not' | '!' )
			{
			DebugLocation(151, 4);
			// Queries\\PomonaQuery.g:151:4: ( 'not' | '!' )
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==76))
			{
				alt23 = 1;
			}
			else if ((LA23_1==40))
			{
				alt23 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 23, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:151:5: 'not'
				{
				DebugLocation(151, 5);
				string_literal51=(IToken)Match(input,76,Follow._76_in_unary_operator950);  
				stream_76.Add(string_literal51);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:151:11: '!'
				{
				DebugLocation(151, 11);
				char_literal52=(IToken)Match(input,40,Follow._40_in_unary_operator952);  
				stream_40.Add(char_literal52);


				}
				break;

			}
			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 151:16: -> NOT_OP
			{
				DebugLocation(151, 19);
				adaptor.AddChild(root_0, (object)adaptor.Create(NOT_OP, "NOT_OP"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_operator", 14);
			LeaveRule("unary_operator", 14);
			LeaveRule_unary_operator();
		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_operator"); }
		return retval;

	}
	// $ANTLR end "unary_operator"

	partial void EnterRule_dot_operator();
	partial void LeaveRule_dot_operator();
	// $ANTLR start "dot_operator"
	// Queries\\PomonaQuery.g:154:1: dot_operator : '.' -> DOT_OP ;
	[GrammarRule("dot_operator")]
	private AstParserRuleReturnScope<object, IToken> dot_operator()
	{
		EnterRule_dot_operator();
		EnterRule("dot_operator", 15);
		TraceIn("dot_operator", 15);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal53 = default(IToken);

		object char_literal53_tree = default(object);
		RewriteRuleITokenStream stream_50=new RewriteRuleITokenStream(adaptor,"token 50");
		try { DebugEnterRule(GrammarFileName, "dot_operator");
		DebugLocation(154, 1);
		try
		{
			// Queries\\PomonaQuery.g:155:2: ( '.' -> DOT_OP )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:155:4: '.'
			{
			DebugLocation(155, 4);
			char_literal53=(IToken)Match(input,50,Follow._50_in_dot_operator968);  
			stream_50.Add(char_literal53);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 155:8: -> DOT_OP
			{
				DebugLocation(155, 11);
				adaptor.AddChild(root_0, (object)adaptor.Create(DOT_OP, "DOT_OP"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dot_operator", 15);
			LeaveRule("dot_operator", 15);
			LeaveRule_dot_operator();
		}
		DebugLocation(156, 1);
		} finally { DebugExitRule(GrammarFileName, "dot_operator"); }
		return retval;

	}
	// $ANTLR end "dot_operator"

	partial void EnterRule_unary_expr();
	partial void LeaveRule_unary_expr();
	// $ANTLR start "unary_expr"
	// Queries\\PomonaQuery.g:159:1: unary_expr : ( unary_operator ^ unary_expr | primary_expr );
	[GrammarRule("unary_expr")]
	private AstParserRuleReturnScope<object, IToken> unary_expr()
	{
		EnterRule_unary_expr();
		EnterRule("unary_expr", 16);
		TraceIn("unary_expr", 16);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> unary_operator54 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> unary_expr55 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> primary_expr56 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "unary_expr");
		DebugLocation(159, 1);
		try
		{
			// Queries\\PomonaQuery.g:160:2: ( unary_operator ^ unary_expr | primary_expr )
			int alt24=2;
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==40||LA24_1==76))
			{
				alt24 = 1;
			}
			else if ((LA24_1==ID||LA24_1==INT||LA24_1==PREFIXED_STRING||LA24_1==STRING||LA24_1==44||LA24_1==58))
			{
				alt24 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:160:4: unary_operator ^ unary_expr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(160, 18);
				PushFollow(Follow._unary_operator_in_unary_expr985);
				unary_operator54=unary_operator();
				PopFollow();

				root_0 = (object)adaptor.BecomeRoot(unary_operator54.Tree, root_0);
				DebugLocation(160, 20);
				PushFollow(Follow._unary_expr_in_unary_expr988);
				unary_expr55=unary_expr();
				PopFollow();

				adaptor.AddChild(root_0, unary_expr55.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:161:4: primary_expr
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._primary_expr_in_unary_expr993);
				primary_expr56=primary_expr();
				PopFollow();

				adaptor.AddChild(root_0, primary_expr56.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary_expr", 16);
			LeaveRule("unary_expr", 16);
			LeaveRule_unary_expr();
		}
		DebugLocation(162, 1);
		} finally { DebugExitRule(GrammarFileName, "unary_expr"); }
		return retval;

	}
	// $ANTLR end "unary_expr"

	partial void EnterRule_primary_expr();
	partial void LeaveRule_primary_expr();
	// $ANTLR start "primary_expr"
	// Queries\\PomonaQuery.g:164:1: primary_expr : postfix_expr ( dot_operator ^ postfix_expr )* ;
	[GrammarRule("primary_expr")]
	private AstParserRuleReturnScope<object, IToken> primary_expr()
	{
		EnterRule_primary_expr();
		EnterRule("primary_expr", 17);
		TraceIn("primary_expr", 17);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> postfix_expr57 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> dot_operator58 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> postfix_expr59 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "primary_expr");
		DebugLocation(164, 1);
		try
		{
			// Queries\\PomonaQuery.g:165:2: ( postfix_expr ( dot_operator ^ postfix_expr )* )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:165:4: postfix_expr ( dot_operator ^ postfix_expr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(165, 4);
			PushFollow(Follow._postfix_expr_in_primary_expr1004);
			postfix_expr57=postfix_expr();
			PopFollow();

			adaptor.AddChild(root_0, postfix_expr57.Tree);
			DebugLocation(165, 17);
			// Queries\\PomonaQuery.g:165:17: ( dot_operator ^ postfix_expr )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_1 = input.LA(1);

				if ((LA25_1==50))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:165:19: dot_operator ^ postfix_expr
					{
					DebugLocation(165, 31);
					PushFollow(Follow._dot_operator_in_primary_expr1008);
					dot_operator58=dot_operator();
					PopFollow();

					root_0 = (object)adaptor.BecomeRoot(dot_operator58.Tree, root_0);
					DebugLocation(165, 33);
					PushFollow(Follow._postfix_expr_in_primary_expr1011);
					postfix_expr59=postfix_expr();
					PopFollow();

					adaptor.AddChild(root_0, postfix_expr59.Tree);

					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("primary_expr", 17);
			LeaveRule("primary_expr", 17);
			LeaveRule_primary_expr();
		}
		DebugLocation(166, 1);
		} finally { DebugExitRule(GrammarFileName, "primary_expr"); }
		return retval;

	}
	// $ANTLR end "primary_expr"

	partial void EnterRule_postfix_expr();
	partial void LeaveRule_postfix_expr();
	// $ANTLR start "postfix_expr"
	// Queries\\PomonaQuery.g:168:1: postfix_expr : ( ID ( '(' arglist_expr ')' ) -> ^( METHOD_CALL ID arglist_expr ) | ID ( '(' ')' ) -> ^( METHOD_CALL ID ) | ID ( '[' arglist_expr ']' ) -> ^( INDEXER_ACCESS ID arglist_expr ) | ID ( '[' ']' ) -> ^( INDEXER_ACCESS ID ) | ID | STRING | INT | '(' ! orderby_expr ')' !| '[' arglist_expr ']' -> ^( ARRAY_LITERAL arglist_expr ) | '[' ']' -> ^( ARRAY_LITERAL ) | PREFIXED_STRING );
	[GrammarRule("postfix_expr")]
	private AstParserRuleReturnScope<object, IToken> postfix_expr()
	{
		EnterRule_postfix_expr();
		EnterRule("postfix_expr", 18);
		TraceIn("postfix_expr", 18);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken ID60 = default(IToken);
		IToken char_literal61 = default(IToken);
		IToken char_literal63 = default(IToken);
		IToken ID64 = default(IToken);
		IToken char_literal65 = default(IToken);
		IToken char_literal66 = default(IToken);
		IToken ID67 = default(IToken);
		IToken char_literal68 = default(IToken);
		IToken char_literal70 = default(IToken);
		IToken ID71 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken ID74 = default(IToken);
		IToken STRING75 = default(IToken);
		IToken INT76 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken PREFIXED_STRING85 = default(IToken);
		AstParserRuleReturnScope<object, IToken> arglist_expr62 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arglist_expr69 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderby_expr78 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> arglist_expr81 = default(AstParserRuleReturnScope<object, IToken>);

		object ID60_tree = default(object);
		object char_literal61_tree = default(object);
		object char_literal63_tree = default(object);
		object ID64_tree = default(object);
		object char_literal65_tree = default(object);
		object char_literal66_tree = default(object);
		object ID67_tree = default(object);
		object char_literal68_tree = default(object);
		object char_literal70_tree = default(object);
		object ID71_tree = default(object);
		object char_literal72_tree = default(object);
		object char_literal73_tree = default(object);
		object ID74_tree = default(object);
		object STRING75_tree = default(object);
		object INT76_tree = default(object);
		object char_literal77_tree = default(object);
		object char_literal79_tree = default(object);
		object char_literal80_tree = default(object);
		object char_literal82_tree = default(object);
		object char_literal83_tree = default(object);
		object char_literal84_tree = default(object);
		object PREFIXED_STRING85_tree = default(object);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_44=new RewriteRuleITokenStream(adaptor,"token 44");
		RewriteRuleITokenStream stream_45=new RewriteRuleITokenStream(adaptor,"token 45");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleSubtreeStream stream_arglist_expr=new RewriteRuleSubtreeStream(adaptor,"rule arglist_expr");
		try { DebugEnterRule(GrammarFileName, "postfix_expr");
		DebugLocation(168, 1);
		try
		{
			// Queries\\PomonaQuery.g:169:2: ( ID ( '(' arglist_expr ')' ) -> ^( METHOD_CALL ID arglist_expr ) | ID ( '(' ')' ) -> ^( METHOD_CALL ID ) | ID ( '[' arglist_expr ']' ) -> ^( INDEXER_ACCESS ID arglist_expr ) | ID ( '[' ']' ) -> ^( INDEXER_ACCESS ID ) | ID | STRING | INT | '(' ! orderby_expr ')' !| '[' arglist_expr ']' -> ^( ARRAY_LITERAL arglist_expr ) | '[' ']' -> ^( ARRAY_LITERAL ) | PREFIXED_STRING )
			int alt26=11;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case ID:
				{
				switch (input.LA(2))
				{
				case 44:
					{
					int LA26_3 = input.LA(3);

					if ((LA26_3==45))
					{
						alt26 = 2;
					}
					else if ((LA26_3==ID||LA26_3==INT||LA26_3==PREFIXED_STRING||LA26_3==STRING||LA26_3==40||LA26_3==44||LA26_3==58||LA26_3==76))
					{
						alt26 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 26, 7, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 58:
					{
					int LA26_3 = input.LA(3);

					if ((LA26_3==59))
					{
						alt26 = 4;
					}
					else if ((LA26_3==ID||LA26_3==INT||LA26_3==PREFIXED_STRING||LA26_3==STRING||LA26_3==40||LA26_3==44||LA26_3==58||LA26_3==76))
					{
						alt26 = 3;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 26, 8, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case EOF:
				case 41:
				case 42:
				case 43:
				case 45:
				case 46:
				case 47:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
				case 59:
				case 60:
				case 61:
				case 62:
				case 63:
				case 64:
				case 65:
				case 66:
				case 67:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 77:
				case 78:
				case 79:
					{
					alt26 = 5;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 26, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				}
				break;
			case STRING:
				{
				alt26 = 6;
				}
				break;
			case INT:
				{
				alt26 = 7;
				}
				break;
			case 44:
				{
				alt26 = 8;
				}
				break;
			case 58:
				{
				int LA26_2 = input.LA(2);

				if ((LA26_2==59))
				{
					alt26 = 10;
				}
				else if ((LA26_2==ID||LA26_2==INT||LA26_2==PREFIXED_STRING||LA26_2==STRING||LA26_2==40||LA26_2==44||LA26_2==58||LA26_2==76))
				{
					alt26 = 9;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PREFIXED_STRING:
				{
				alt26 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:169:4: ID ( '(' arglist_expr ')' )
				{
				DebugLocation(169, 4);
				ID60=(IToken)Match(input,ID,Follow._ID_in_postfix_expr1025);  
				stream_ID.Add(ID60);

				DebugLocation(169, 7);
				// Queries\\PomonaQuery.g:169:7: ( '(' arglist_expr ')' )
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:169:9: '(' arglist_expr ')'
				{
				DebugLocation(169, 9);
				char_literal61=(IToken)Match(input,44,Follow._44_in_postfix_expr1029);  
				stream_44.Add(char_literal61);

				DebugLocation(169, 13);
				PushFollow(Follow._arglist_expr_in_postfix_expr1031);
				arglist_expr62=arglist_expr();
				PopFollow();

				stream_arglist_expr.Add(arglist_expr62.Tree);
				DebugLocation(169, 26);
				char_literal63=(IToken)Match(input,45,Follow._45_in_postfix_expr1033);  
				stream_45.Add(char_literal63);


				}



				{
				// AST REWRITE
				// elements: ID, arglist_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 169:32: -> ^( METHOD_CALL ID arglist_expr )
				{
					DebugLocation(169, 35);
					// Queries\\PomonaQuery.g:169:35: ^( METHOD_CALL ID arglist_expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(169, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

					DebugLocation(169, 49);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(169, 52);
					adaptor.AddChild(root_1, stream_arglist_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:170:4: ID ( '(' ')' )
				{
				DebugLocation(170, 4);
				ID64=(IToken)Match(input,ID,Follow._ID_in_postfix_expr1050);  
				stream_ID.Add(ID64);

				DebugLocation(170, 7);
				// Queries\\PomonaQuery.g:170:7: ( '(' ')' )
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:170:9: '(' ')'
				{
				DebugLocation(170, 9);
				char_literal65=(IToken)Match(input,44,Follow._44_in_postfix_expr1054);  
				stream_44.Add(char_literal65);

				DebugLocation(170, 13);
				char_literal66=(IToken)Match(input,45,Follow._45_in_postfix_expr1056);  
				stream_45.Add(char_literal66);


				}



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 170:19: -> ^( METHOD_CALL ID )
				{
					DebugLocation(170, 22);
					// Queries\\PomonaQuery.g:170:22: ^( METHOD_CALL ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(170, 24);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

					DebugLocation(170, 36);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Queries\\PomonaQuery.g:171:4: ID ( '[' arglist_expr ']' )
				{
				DebugLocation(171, 4);
				ID67=(IToken)Match(input,ID,Follow._ID_in_postfix_expr1071);  
				stream_ID.Add(ID67);

				DebugLocation(171, 7);
				// Queries\\PomonaQuery.g:171:7: ( '[' arglist_expr ']' )
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:171:9: '[' arglist_expr ']'
				{
				DebugLocation(171, 9);
				char_literal68=(IToken)Match(input,58,Follow._58_in_postfix_expr1075);  
				stream_58.Add(char_literal68);

				DebugLocation(171, 13);
				PushFollow(Follow._arglist_expr_in_postfix_expr1077);
				arglist_expr69=arglist_expr();
				PopFollow();

				stream_arglist_expr.Add(arglist_expr69.Tree);
				DebugLocation(171, 26);
				char_literal70=(IToken)Match(input,59,Follow._59_in_postfix_expr1079);  
				stream_59.Add(char_literal70);


				}



				{
				// AST REWRITE
				// elements: ID, arglist_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 171:32: -> ^( INDEXER_ACCESS ID arglist_expr )
				{
					DebugLocation(171, 35);
					// Queries\\PomonaQuery.g:171:35: ^( INDEXER_ACCESS ID arglist_expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(171, 37);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INDEXER_ACCESS, "INDEXER_ACCESS"), root_1);

					DebugLocation(171, 52);
					adaptor.AddChild(root_1, stream_ID.NextNode());
					DebugLocation(171, 55);
					adaptor.AddChild(root_1, stream_arglist_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Queries\\PomonaQuery.g:172:4: ID ( '[' ']' )
				{
				DebugLocation(172, 4);
				ID71=(IToken)Match(input,ID,Follow._ID_in_postfix_expr1096);  
				stream_ID.Add(ID71);

				DebugLocation(172, 7);
				// Queries\\PomonaQuery.g:172:7: ( '[' ']' )
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:172:9: '[' ']'
				{
				DebugLocation(172, 9);
				char_literal72=(IToken)Match(input,58,Follow._58_in_postfix_expr1100);  
				stream_58.Add(char_literal72);

				DebugLocation(172, 13);
				char_literal73=(IToken)Match(input,59,Follow._59_in_postfix_expr1102);  
				stream_59.Add(char_literal73);


				}



				{
				// AST REWRITE
				// elements: ID
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 172:19: -> ^( INDEXER_ACCESS ID )
				{
					DebugLocation(172, 22);
					// Queries\\PomonaQuery.g:172:22: ^( INDEXER_ACCESS ID )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(172, 24);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(INDEXER_ACCESS, "INDEXER_ACCESS"), root_1);

					DebugLocation(172, 39);
					adaptor.AddChild(root_1, stream_ID.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Queries\\PomonaQuery.g:173:4: ID
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(173, 4);
				ID74=(IToken)Match(input,ID,Follow._ID_in_postfix_expr1117); 
				ID74_tree = (object)adaptor.Create(ID74);
				adaptor.AddChild(root_0, ID74_tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Queries\\PomonaQuery.g:174:4: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(174, 4);
				STRING75=(IToken)Match(input,STRING,Follow._STRING_in_postfix_expr1122); 
				STRING75_tree = (object)adaptor.Create(STRING75);
				adaptor.AddChild(root_0, STRING75_tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Queries\\PomonaQuery.g:175:4: INT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(175, 4);
				INT76=(IToken)Match(input,INT,Follow._INT_in_postfix_expr1127); 
				INT76_tree = (object)adaptor.Create(INT76);
				adaptor.AddChild(root_0, INT76_tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Queries\\PomonaQuery.g:176:4: '(' ! orderby_expr ')' !
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(176, 7);
				char_literal77=(IToken)Match(input,44,Follow._44_in_postfix_expr1132); 
				DebugLocation(176, 9);
				PushFollow(Follow._orderby_expr_in_postfix_expr1135);
				orderby_expr78=orderby_expr();
				PopFollow();

				adaptor.AddChild(root_0, orderby_expr78.Tree);
				DebugLocation(176, 25);
				char_literal79=(IToken)Match(input,45,Follow._45_in_postfix_expr1137); 

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Queries\\PomonaQuery.g:177:4: '[' arglist_expr ']'
				{
				DebugLocation(177, 4);
				char_literal80=(IToken)Match(input,58,Follow._58_in_postfix_expr1143);  
				stream_58.Add(char_literal80);

				DebugLocation(177, 8);
				PushFollow(Follow._arglist_expr_in_postfix_expr1145);
				arglist_expr81=arglist_expr();
				PopFollow();

				stream_arglist_expr.Add(arglist_expr81.Tree);
				DebugLocation(177, 21);
				char_literal82=(IToken)Match(input,59,Follow._59_in_postfix_expr1147);  
				stream_59.Add(char_literal82);



				{
				// AST REWRITE
				// elements: arglist_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 177:25: -> ^( ARRAY_LITERAL arglist_expr )
				{
					DebugLocation(177, 28);
					// Queries\\PomonaQuery.g:177:28: ^( ARRAY_LITERAL arglist_expr )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(177, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

					DebugLocation(177, 44);
					adaptor.AddChild(root_1, stream_arglist_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Queries\\PomonaQuery.g:178:4: '[' ']'
				{
				DebugLocation(178, 4);
				char_literal83=(IToken)Match(input,58,Follow._58_in_postfix_expr1160);  
				stream_58.Add(char_literal83);

				DebugLocation(178, 8);
				char_literal84=(IToken)Match(input,59,Follow._59_in_postfix_expr1162);  
				stream_59.Add(char_literal84);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 178:12: -> ^( ARRAY_LITERAL )
				{
					DebugLocation(178, 15);
					// Queries\\PomonaQuery.g:178:15: ^( ARRAY_LITERAL )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(178, 17);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Queries\\PomonaQuery.g:179:4: PREFIXED_STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(179, 4);
				PREFIXED_STRING85=(IToken)Match(input,PREFIXED_STRING,Follow._PREFIXED_STRING_in_postfix_expr1173); 
				PREFIXED_STRING85_tree = (object)adaptor.Create(PREFIXED_STRING85);
				adaptor.AddChild(root_0, PREFIXED_STRING85_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("postfix_expr", 18);
			LeaveRule("postfix_expr", 18);
			LeaveRule_postfix_expr();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "postfix_expr"); }
		return retval;

	}
	// $ANTLR end "postfix_expr"

	partial void EnterRule_sortorder_operator();
	partial void LeaveRule_sortorder_operator();
	// $ANTLR start "sortorder_operator"
	// Queries\\PomonaQuery.g:182:1: sortorder_operator : ( 'asc' | 'desc' );
	[GrammarRule("sortorder_operator")]
	private AstParserRuleReturnScope<object, IToken> sortorder_operator()
	{
		EnterRule_sortorder_operator();
		EnterRule("sortorder_operator", 19);
		TraceIn("sortorder_operator", 19);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set86 = default(IToken);

		object set86_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "sortorder_operator");
		DebugLocation(182, 1);
		try
		{
			// Queries\\PomonaQuery.g:183:2: ( 'asc' | 'desc' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(183, 2);

			set86=(IToken)input.LT(1);
			if ((input.LA(1)>=63 && input.LA(1)<=64))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set86));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sortorder_operator", 19);
			LeaveRule("sortorder_operator", 19);
			LeaveRule_sortorder_operator();
		}
		DebugLocation(185, 1);
		} finally { DebugExitRule(GrammarFileName, "sortorder_operator"); }
		return retval;

	}
	// $ANTLR end "sortorder_operator"

	partial void EnterRule_orderby_expr();
	partial void LeaveRule_orderby_expr();
	// $ANTLR start "orderby_expr"
	// Queries\\PomonaQuery.g:187:1: orderby_expr : exp ( sortorder_operator )? -> ^( ORDERBY_ASC exp ( sortorder_operator )? ) ;
	[GrammarRule("orderby_expr")]
	private AstParserRuleReturnScope<object, IToken> orderby_expr()
	{
		EnterRule_orderby_expr();
		EnterRule("orderby_expr", 20);
		TraceIn("orderby_expr", 20);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> exp87 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> sortorder_operator88 = default(AstParserRuleReturnScope<object, IToken>);

		RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp");
		RewriteRuleSubtreeStream stream_sortorder_operator=new RewriteRuleSubtreeStream(adaptor,"rule sortorder_operator");
		try { DebugEnterRule(GrammarFileName, "orderby_expr");
		DebugLocation(187, 1);
		try
		{
			// Queries\\PomonaQuery.g:188:2: ( exp ( sortorder_operator )? -> ^( ORDERBY_ASC exp ( sortorder_operator )? ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:188:4: exp ( sortorder_operator )?
			{
			DebugLocation(188, 4);
			PushFollow(Follow._exp_in_orderby_expr1200);
			exp87=exp();
			PopFollow();

			stream_exp.Add(exp87.Tree);
			DebugLocation(188, 8);
			// Queries\\PomonaQuery.g:188:8: ( sortorder_operator )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_1 = input.LA(1);

			if (((LA27_1>=63 && LA27_1<=64)))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:188:9: sortorder_operator
				{
				DebugLocation(188, 9);
				PushFollow(Follow._sortorder_operator_in_orderby_expr1203);
				sortorder_operator88=sortorder_operator();
				PopFollow();

				stream_sortorder_operator.Add(sortorder_operator88.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: exp, sortorder_operator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 188:30: -> ^( ORDERBY_ASC exp ( sortorder_operator )? )
			{
				DebugLocation(188, 33);
				// Queries\\PomonaQuery.g:188:33: ^( ORDERBY_ASC exp ( sortorder_operator )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(188, 35);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ORDERBY_ASC, "ORDERBY_ASC"), root_1);

				DebugLocation(188, 47);
				adaptor.AddChild(root_1, stream_exp.NextTree());
				DebugLocation(188, 51);
				// Queries\\PomonaQuery.g:188:51: ( sortorder_operator )?
				if (stream_sortorder_operator.HasNext)
				{
					DebugLocation(188, 51);
					adaptor.AddChild(root_1, stream_sortorder_operator.NextTree());

				}
				stream_sortorder_operator.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_expr", 20);
			LeaveRule("orderby_expr", 20);
			LeaveRule_orderby_expr();
		}
		DebugLocation(189, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_expr"); }
		return retval;

	}
	// $ANTLR end "orderby_expr"

	partial void EnterRule_arglist_expr();
	partial void LeaveRule_arglist_expr();
	// $ANTLR start "arglist_expr"
	// Queries\\PomonaQuery.g:191:1: arglist_expr : orderby_expr ( ',' ! orderby_expr )* ;
	[GrammarRule("arglist_expr")]
	private AstParserRuleReturnScope<object, IToken> arglist_expr()
	{
		EnterRule_arglist_expr();
		EnterRule("arglist_expr", 21);
		TraceIn("arglist_expr", 21);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal90 = default(IToken);
		AstParserRuleReturnScope<object, IToken> orderby_expr89 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> orderby_expr91 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal90_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arglist_expr");
		DebugLocation(191, 1);
		try
		{
			// Queries\\PomonaQuery.g:192:2: ( orderby_expr ( ',' ! orderby_expr )* )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:192:4: orderby_expr ( ',' ! orderby_expr )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(192, 4);
			PushFollow(Follow._orderby_expr_in_arglist_expr1228);
			orderby_expr89=orderby_expr();
			PopFollow();

			adaptor.AddChild(root_0, orderby_expr89.Tree);
			DebugLocation(192, 17);
			// Queries\\PomonaQuery.g:192:17: ( ',' ! orderby_expr )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==48))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:192:19: ',' ! orderby_expr
					{
					DebugLocation(192, 22);
					char_literal90=(IToken)Match(input,48,Follow._48_in_arglist_expr1232); 
					DebugLocation(192, 24);
					PushFollow(Follow._orderby_expr_in_arglist_expr1235);
					orderby_expr91=orderby_expr();
					PopFollow();

					adaptor.AddChild(root_0, orderby_expr91.Tree);

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
			retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("arglist_expr", 21);
			LeaveRule("arglist_expr", 21);
			LeaveRule_arglist_expr();
		}
		DebugLocation(193, 1);
		} finally { DebugExitRule(GrammarFileName, "arglist_expr"); }
		return retval;

	}
	// $ANTLR end "arglist_expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _arglist_expr_in_parse509 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _as_expression_in_exp530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expression_in_as_expression541 = new BitSet(new ulong[]{0x4000000000000002UL});
		public static readonly BitSet _62_in_as_expression545 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _lambda_expression_in_as_expression547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expression_in_lambda_expression570 = new BitSet(new ulong[]{0x10000000000002UL});
		public static readonly BitSet _52_in_lambda_expression574 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _or_expression_in_lambda_expression576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expression_in_or_expression599 = new BitSet(new ulong[]{0x2UL,0xA000UL});
		public static readonly BitSet _77_in_or_expression604 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _79_in_or_expression606 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _and_expression_in_or_expression609 = new BitSet(new ulong[]{0x2UL,0xA000UL});
		public static readonly BitSet _relational_expr_in_and_expression648 = new BitSet(new ulong[]{0x2000080000000002UL});
		public static readonly BitSet _and_operator_in_and_expression652 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _relational_expr_in_and_expression654 = new BitSet(new ulong[]{0x2000080000000002UL});
		public static readonly BitSet _68_in_relational_operator681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _56_in_relational_operator683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _72_in_relational_operator694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _53_in_relational_operator696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _66_in_relational_operator707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _55_in_relational_operator709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _67_in_relational_operator720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_relational_operator722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _71_in_relational_operator733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _54_in_relational_operator735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_relational_operator746 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _41_in_relational_operator748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _70_in_relational_operator758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _69_in_relational_operator767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additive_expr_in_relational_expr784 = new BitSet(new ulong[]{0x3E0020000000002UL,0x9FCUL});
		public static readonly BitSet _relational_operator_in_relational_expr787 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _additive_expr_in_relational_expr790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _60_in_additive_operator807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_additive_operator809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_additive_operator823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _49_in_additive_operator825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicative_expr_in_additive_expr845 = new BitSet(new ulong[]{0x1002800000000002UL,0x4000UL});
		public static readonly BitSet _additive_operator_in_additive_expr849 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _multiplicative_expr_in_additive_expr852 = new BitSet(new ulong[]{0x1002800000000002UL,0x4000UL});
		public static readonly BitSet _74_in_multiplicative_operator872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_multiplicative_operator874 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_multiplicative_operator890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_multiplicative_operator892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _73_in_multiplicative_operator905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_multiplicative_operator907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_expr_in_multiplicative_expr927 = new BitSet(new ulong[]{0x8440000000002UL,0x602UL});
		public static readonly BitSet _multiplicative_operator_in_multiplicative_expr931 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _unary_expr_in_multiplicative_expr934 = new BitSet(new ulong[]{0x8440000000002UL,0x602UL});
		public static readonly BitSet _76_in_unary_operator950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _40_in_unary_operator952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _50_in_dot_operator968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_operator_in_unary_expr985 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _unary_expr_in_unary_expr988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primary_expr_in_unary_expr993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _postfix_expr_in_primary_expr1004 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _dot_operator_in_primary_expr1008 = new BitSet(new ulong[]{0x400101400120000UL});
		public static readonly BitSet _postfix_expr_in_primary_expr1011 = new BitSet(new ulong[]{0x4000000000002UL});
		public static readonly BitSet _ID_in_postfix_expr1025 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_postfix_expr1029 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _arglist_expr_in_postfix_expr1031 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_postfix_expr1033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_postfix_expr1050 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _44_in_postfix_expr1054 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_postfix_expr1056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_postfix_expr1071 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_postfix_expr1075 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _arglist_expr_in_postfix_expr1077 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_postfix_expr1079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_postfix_expr1096 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _58_in_postfix_expr1100 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_postfix_expr1102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_postfix_expr1117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_postfix_expr1122 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_postfix_expr1127 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_postfix_expr1132 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _orderby_expr_in_postfix_expr1135 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _45_in_postfix_expr1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_postfix_expr1143 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _arglist_expr_in_postfix_expr1145 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_postfix_expr1147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _58_in_postfix_expr1160 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_postfix_expr1162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PREFIXED_STRING_in_postfix_expr1173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exp_in_orderby_expr1200 = new BitSet(new ulong[]{0x8000000000000002UL,0x1UL});
		public static readonly BitSet _sortorder_operator_in_orderby_expr1203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_expr_in_arglist_expr1228 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _48_in_arglist_expr1232 = new BitSet(new ulong[]{0x400111400120000UL,0x1000UL});
		public static readonly BitSet _orderby_expr_in_arglist_expr1235 = new BitSet(new ulong[]{0x1000000000002UL});
	}
	#endregion Follow sets
}

} // namespace  Pomona.Queries 
