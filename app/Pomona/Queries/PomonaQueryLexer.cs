//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.0.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.0.2 Queries\\PomonaQuery.g 2013-10-19 20:50:29

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Pomona.Queries 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.0.2")]
[System.CLSCompliant(false)]
public partial class PomonaQueryLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ADD_OP=4;
	public const int AND_OP=5;
	public const int ARRAY_LITERAL=6;
	public const int AS_OP=7;
	public const int DATETIME_LITERAL=8;
	public const int DIV_OP=9;
	public const int DOT_OP=10;
	public const int EQ_OP=11;
	public const int ESC_SEQ=12;
	public const int GE_OP=13;
	public const int GT_OP=14;
	public const int GUID_LITERAL=15;
	public const int HEX_DIGIT=16;
	public const int ID=17;
	public const int INDEXER_ACCESS=18;
	public const int INT=19;
	public const int IN_OP=20;
	public const int LAMBDA_OP=21;
	public const int LE_OP=22;
	public const int LT_OP=23;
	public const int METHOD_CALL=24;
	public const int MOD_OP=25;
	public const int MUL_OP=26;
	public const int NE_OP=27;
	public const int NOT_OP=28;
	public const int OCTAL_ESC=29;
	public const int OR_OP=30;
	public const int PREFIXED_STRING=31;
	public const int ROOT=32;
	public const int STRING=33;
	public const int SUB_OP=34;
	public const int UNICODE_ESC=35;
	public const int WS=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	const int HIDDEN = Hidden;

	// delegates
	// delegators

	public PomonaQueryLexer()
	{
		OnCreated();
	}

	public PomonaQueryLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public PomonaQueryLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Queries\\PomonaQuery.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 1);
		TraceIn("T__37", 1);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:10:7: ( '!' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:10:9: '!'
			{
			DebugLocation(10, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 1);
			LeaveRule("T__37", 1);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 2);
		TraceIn("T__38", 2);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:11:7: ( '!=' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:11:9: '!='
			{
			DebugLocation(11, 9);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 2);
			LeaveRule("T__38", 2);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 3);
		TraceIn("T__39", 3);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:12:7: ( '%' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:12:9: '%'
			{
			DebugLocation(12, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 3);
			LeaveRule("T__39", 3);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 4);
		TraceIn("T__40", 4);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:13:7: ( '&&' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:13:9: '&&'
			{
			DebugLocation(13, 9);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 4);
			LeaveRule("T__40", 4);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 5);
		TraceIn("T__41", 5);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:14:7: ( '(' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:14:9: '('
			{
			DebugLocation(14, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 5);
			LeaveRule("T__41", 5);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_T__42();
	partial void LeaveRule_T__42();

	// $ANTLR start "T__42"
	[GrammarRule("T__42")]
	private void mT__42()
	{
		EnterRule_T__42();
		EnterRule("T__42", 6);
		TraceIn("T__42", 6);
		try
		{
			int _type = T__42;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:15:7: ( ')' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:15:9: ')'
			{
			DebugLocation(15, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__42", 6);
			LeaveRule("T__42", 6);
			LeaveRule_T__42();
		}
	}
	// $ANTLR end "T__42"

	partial void EnterRule_T__43();
	partial void LeaveRule_T__43();

	// $ANTLR start "T__43"
	[GrammarRule("T__43")]
	private void mT__43()
	{
		EnterRule_T__43();
		EnterRule("T__43", 7);
		TraceIn("T__43", 7);
		try
		{
			int _type = T__43;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:16:7: ( '*' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:16:9: '*'
			{
			DebugLocation(16, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__43", 7);
			LeaveRule("T__43", 7);
			LeaveRule_T__43();
		}
	}
	// $ANTLR end "T__43"

	partial void EnterRule_T__44();
	partial void LeaveRule_T__44();

	// $ANTLR start "T__44"
	[GrammarRule("T__44")]
	private void mT__44()
	{
		EnterRule_T__44();
		EnterRule("T__44", 8);
		TraceIn("T__44", 8);
		try
		{
			int _type = T__44;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:17:7: ( '+' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:17:9: '+'
			{
			DebugLocation(17, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__44", 8);
			LeaveRule("T__44", 8);
			LeaveRule_T__44();
		}
	}
	// $ANTLR end "T__44"

	partial void EnterRule_T__45();
	partial void LeaveRule_T__45();

	// $ANTLR start "T__45"
	[GrammarRule("T__45")]
	private void mT__45()
	{
		EnterRule_T__45();
		EnterRule("T__45", 9);
		TraceIn("T__45", 9);
		try
		{
			int _type = T__45;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:18:7: ( ',' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:18:9: ','
			{
			DebugLocation(18, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__45", 9);
			LeaveRule("T__45", 9);
			LeaveRule_T__45();
		}
	}
	// $ANTLR end "T__45"

	partial void EnterRule_T__46();
	partial void LeaveRule_T__46();

	// $ANTLR start "T__46"
	[GrammarRule("T__46")]
	private void mT__46()
	{
		EnterRule_T__46();
		EnterRule("T__46", 10);
		TraceIn("T__46", 10);
		try
		{
			int _type = T__46;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:19:7: ( '-' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:19:9: '-'
			{
			DebugLocation(19, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__46", 10);
			LeaveRule("T__46", 10);
			LeaveRule_T__46();
		}
	}
	// $ANTLR end "T__46"

	partial void EnterRule_T__47();
	partial void LeaveRule_T__47();

	// $ANTLR start "T__47"
	[GrammarRule("T__47")]
	private void mT__47()
	{
		EnterRule_T__47();
		EnterRule("T__47", 11);
		TraceIn("T__47", 11);
		try
		{
			int _type = T__47;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:20:7: ( '.' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:20:9: '.'
			{
			DebugLocation(20, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__47", 11);
			LeaveRule("T__47", 11);
			LeaveRule_T__47();
		}
	}
	// $ANTLR end "T__47"

	partial void EnterRule_T__48();
	partial void LeaveRule_T__48();

	// $ANTLR start "T__48"
	[GrammarRule("T__48")]
	private void mT__48()
	{
		EnterRule_T__48();
		EnterRule("T__48", 12);
		TraceIn("T__48", 12);
		try
		{
			int _type = T__48;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:21:7: ( '/' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:21:9: '/'
			{
			DebugLocation(21, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__48", 12);
			LeaveRule("T__48", 12);
			LeaveRule_T__48();
		}
	}
	// $ANTLR end "T__48"

	partial void EnterRule_T__49();
	partial void LeaveRule_T__49();

	// $ANTLR start "T__49"
	[GrammarRule("T__49")]
	private void mT__49()
	{
		EnterRule_T__49();
		EnterRule("T__49", 13);
		TraceIn("T__49", 13);
		try
		{
			int _type = T__49;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:22:7: ( ':' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:22:9: ':'
			{
			DebugLocation(22, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__49", 13);
			LeaveRule("T__49", 13);
			LeaveRule_T__49();
		}
	}
	// $ANTLR end "T__49"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 14);
		TraceIn("T__50", 14);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:23:7: ( '<' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:23:9: '<'
			{
			DebugLocation(23, 9);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 14);
			LeaveRule("T__50", 14);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 15);
		TraceIn("T__51", 15);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:24:7: ( '<=' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:24:9: '<='
			{
			DebugLocation(24, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 15);
			LeaveRule("T__51", 15);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 16);
		TraceIn("T__52", 16);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:25:7: ( '==' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:25:9: '=='
			{
			DebugLocation(25, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 16);
			LeaveRule("T__52", 16);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_T__53();
	partial void LeaveRule_T__53();

	// $ANTLR start "T__53"
	[GrammarRule("T__53")]
	private void mT__53()
	{
		EnterRule_T__53();
		EnterRule("T__53", 17);
		TraceIn("T__53", 17);
		try
		{
			int _type = T__53;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:26:7: ( '>' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:26:9: '>'
			{
			DebugLocation(26, 9);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__53", 17);
			LeaveRule("T__53", 17);
			LeaveRule_T__53();
		}
	}
	// $ANTLR end "T__53"

	partial void EnterRule_T__54();
	partial void LeaveRule_T__54();

	// $ANTLR start "T__54"
	[GrammarRule("T__54")]
	private void mT__54()
	{
		EnterRule_T__54();
		EnterRule("T__54", 18);
		TraceIn("T__54", 18);
		try
		{
			int _type = T__54;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:27:7: ( '>=' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:27:9: '>='
			{
			DebugLocation(27, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__54", 18);
			LeaveRule("T__54", 18);
			LeaveRule_T__54();
		}
	}
	// $ANTLR end "T__54"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 19);
		TraceIn("T__55", 19);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:28:7: ( '[' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:28:9: '['
			{
			DebugLocation(28, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 19);
			LeaveRule("T__55", 19);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 20);
		TraceIn("T__56", 20);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:29:7: ( ']' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:29:9: ']'
			{
			DebugLocation(29, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 20);
			LeaveRule("T__56", 20);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 21);
		TraceIn("T__57", 21);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:30:7: ( 'add' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:30:9: 'add'
			{
			DebugLocation(30, 9);
			Match("add"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 21);
			LeaveRule("T__57", 21);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_T__58();
	partial void LeaveRule_T__58();

	// $ANTLR start "T__58"
	[GrammarRule("T__58")]
	private void mT__58()
	{
		EnterRule_T__58();
		EnterRule("T__58", 22);
		TraceIn("T__58", 22);
		try
		{
			int _type = T__58;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:31:7: ( 'and' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:31:9: 'and'
			{
			DebugLocation(31, 9);
			Match("and"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__58", 22);
			LeaveRule("T__58", 22);
			LeaveRule_T__58();
		}
	}
	// $ANTLR end "T__58"

	partial void EnterRule_T__59();
	partial void LeaveRule_T__59();

	// $ANTLR start "T__59"
	[GrammarRule("T__59")]
	private void mT__59()
	{
		EnterRule_T__59();
		EnterRule("T__59", 23);
		TraceIn("T__59", 23);
		try
		{
			int _type = T__59;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:32:7: ( 'as' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:32:9: 'as'
			{
			DebugLocation(32, 9);
			Match("as"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__59", 23);
			LeaveRule("T__59", 23);
			LeaveRule_T__59();
		}
	}
	// $ANTLR end "T__59"

	partial void EnterRule_T__60();
	partial void LeaveRule_T__60();

	// $ANTLR start "T__60"
	[GrammarRule("T__60")]
	private void mT__60()
	{
		EnterRule_T__60();
		EnterRule("T__60", 24);
		TraceIn("T__60", 24);
		try
		{
			int _type = T__60;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:33:7: ( 'div' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:33:9: 'div'
			{
			DebugLocation(33, 9);
			Match("div"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__60", 24);
			LeaveRule("T__60", 24);
			LeaveRule_T__60();
		}
	}
	// $ANTLR end "T__60"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 25);
		TraceIn("T__61", 25);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:34:7: ( 'eq' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:34:9: 'eq'
			{
			DebugLocation(34, 9);
			Match("eq"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 25);
			LeaveRule("T__61", 25);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 26);
		TraceIn("T__62", 26);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:35:7: ( 'ge' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:35:9: 'ge'
			{
			DebugLocation(35, 9);
			Match("ge"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 26);
			LeaveRule("T__62", 26);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 27);
		TraceIn("T__63", 27);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:36:7: ( 'gt' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:36:9: 'gt'
			{
			DebugLocation(36, 9);
			Match("gt"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 27);
			LeaveRule("T__63", 27);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 28);
		TraceIn("T__64", 28);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:37:7: ( 'in' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:37:9: 'in'
			{
			DebugLocation(37, 9);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 28);
			LeaveRule("T__64", 28);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 29);
		TraceIn("T__65", 29);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:38:7: ( 'le' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:38:9: 'le'
			{
			DebugLocation(38, 9);
			Match("le"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 29);
			LeaveRule("T__65", 29);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 30);
		TraceIn("T__66", 30);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:39:7: ( 'lt' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:39:9: 'lt'
			{
			DebugLocation(39, 9);
			Match("lt"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 30);
			LeaveRule("T__66", 30);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_T__67();
	partial void LeaveRule_T__67();

	// $ANTLR start "T__67"
	[GrammarRule("T__67")]
	private void mT__67()
	{
		EnterRule_T__67();
		EnterRule("T__67", 31);
		TraceIn("T__67", 31);
		try
		{
			int _type = T__67;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:40:7: ( 'mod' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:40:9: 'mod'
			{
			DebugLocation(40, 9);
			Match("mod"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__67", 31);
			LeaveRule("T__67", 31);
			LeaveRule_T__67();
		}
	}
	// $ANTLR end "T__67"

	partial void EnterRule_T__68();
	partial void LeaveRule_T__68();

	// $ANTLR start "T__68"
	[GrammarRule("T__68")]
	private void mT__68()
	{
		EnterRule_T__68();
		EnterRule("T__68", 32);
		TraceIn("T__68", 32);
		try
		{
			int _type = T__68;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:41:7: ( 'mul' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:41:9: 'mul'
			{
			DebugLocation(41, 9);
			Match("mul"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__68", 32);
			LeaveRule("T__68", 32);
			LeaveRule_T__68();
		}
	}
	// $ANTLR end "T__68"

	partial void EnterRule_T__69();
	partial void LeaveRule_T__69();

	// $ANTLR start "T__69"
	[GrammarRule("T__69")]
	private void mT__69()
	{
		EnterRule_T__69();
		EnterRule("T__69", 33);
		TraceIn("T__69", 33);
		try
		{
			int _type = T__69;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:42:7: ( 'ne' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:42:9: 'ne'
			{
			DebugLocation(42, 9);
			Match("ne"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__69", 33);
			LeaveRule("T__69", 33);
			LeaveRule_T__69();
		}
	}
	// $ANTLR end "T__69"

	partial void EnterRule_T__70();
	partial void LeaveRule_T__70();

	// $ANTLR start "T__70"
	[GrammarRule("T__70")]
	private void mT__70()
	{
		EnterRule_T__70();
		EnterRule("T__70", 34);
		TraceIn("T__70", 34);
		try
		{
			int _type = T__70;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:43:7: ( 'not' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:43:9: 'not'
			{
			DebugLocation(43, 9);
			Match("not"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__70", 34);
			LeaveRule("T__70", 34);
			LeaveRule_T__70();
		}
	}
	// $ANTLR end "T__70"

	partial void EnterRule_T__71();
	partial void LeaveRule_T__71();

	// $ANTLR start "T__71"
	[GrammarRule("T__71")]
	private void mT__71()
	{
		EnterRule_T__71();
		EnterRule("T__71", 35);
		TraceIn("T__71", 35);
		try
		{
			int _type = T__71;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:44:7: ( 'or' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:44:9: 'or'
			{
			DebugLocation(44, 9);
			Match("or"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__71", 35);
			LeaveRule("T__71", 35);
			LeaveRule_T__71();
		}
	}
	// $ANTLR end "T__71"

	partial void EnterRule_T__72();
	partial void LeaveRule_T__72();

	// $ANTLR start "T__72"
	[GrammarRule("T__72")]
	private void mT__72()
	{
		EnterRule_T__72();
		EnterRule("T__72", 36);
		TraceIn("T__72", 36);
		try
		{
			int _type = T__72;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:45:7: ( 'sub' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:45:9: 'sub'
			{
			DebugLocation(45, 9);
			Match("sub"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__72", 36);
			LeaveRule("T__72", 36);
			LeaveRule_T__72();
		}
	}
	// $ANTLR end "T__72"

	partial void EnterRule_T__73();
	partial void LeaveRule_T__73();

	// $ANTLR start "T__73"
	[GrammarRule("T__73")]
	private void mT__73()
	{
		EnterRule_T__73();
		EnterRule("T__73", 37);
		TraceIn("T__73", 37);
		try
		{
			int _type = T__73;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:46:7: ( '||' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:46:9: '||'
			{
			DebugLocation(46, 9);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__73", 37);
			LeaveRule("T__73", 37);
			LeaveRule_T__73();
		}
	}
	// $ANTLR end "T__73"

	partial void EnterRule_PREFIXED_STRING();
	partial void LeaveRule_PREFIXED_STRING();

	// $ANTLR start "PREFIXED_STRING"
	[GrammarRule("PREFIXED_STRING")]
	private void mPREFIXED_STRING()
	{
		EnterRule_PREFIXED_STRING();
		EnterRule("PREFIXED_STRING", 38);
		TraceIn("PREFIXED_STRING", 38);
		try
		{
			int _type = PREFIXED_STRING;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:45:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )* '\\'' (~ ( '\\\\' | '\\'' ) )* '\\'' )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:45:4: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )* '\\'' (~ ( '\\\\' | '\\'' ) )* '\\''
			{
			DebugLocation(45, 4);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(45, 24);
			// Queries\\PomonaQuery.g:45:24: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||(LA1_1>='a' && LA1_1<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:
					{
					DebugLocation(45, 24);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(45, 55);
			Match('\''); 
			DebugLocation(45, 60);
			// Queries\\PomonaQuery.g:45:60: (~ ( '\\\\' | '\\'' ) )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='\u0000' && LA2_1<='&')||(LA2_1>='(' && LA2_1<='[')||(LA2_1>=']' && LA2_1<='\uFFFF')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:
					{
					DebugLocation(45, 60);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(45, 82);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PREFIXED_STRING", 38);
			LeaveRule("PREFIXED_STRING", 38);
			LeaveRule_PREFIXED_STRING();
		}
	}
	// $ANTLR end "PREFIXED_STRING"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 39);
		TraceIn("ID", 39);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:48:5: ( ( '@' | 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:48:7: ( '@' | 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(48, 7);
			if ((input.LA(1)>='@' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(48, 35);
			// Queries\\PomonaQuery.g:48:35: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='0' && LA3_1<='9')||(LA3_1>='A' && LA3_1<='Z')||LA3_1=='_'||(LA3_1>='a' && LA3_1<='z')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:
					{
					DebugLocation(48, 35);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 39);
			LeaveRule("ID", 39);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 40);
		TraceIn("INT", 40);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:51:5: ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'm' | 'M' | 'f' | 'F' )? )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:51:7: ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'm' | 'M' | 'f' | 'F' )?
			{
			DebugLocation(51, 10);
			// Queries\\PomonaQuery.g:51:10: ( '0' .. '9' )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='0' && LA4_1<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:
					{
					DebugLocation(51, 10);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(51, 17);
			// Queries\\PomonaQuery.g:51:17: ( '.' ( '0' .. '9' )+ )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if ((LA6_1=='.'))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:51:18: '.' ( '0' .. '9' )+
				{
				DebugLocation(51, 18);
				Match('.'); 
				DebugLocation(51, 22);
				// Queries\\PomonaQuery.g:51:22: ( '0' .. '9' )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if (((LA5_1>='0' && LA5_1<='9')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// Queries\\PomonaQuery.g:
						{
						DebugLocation(51, 22);
						input.Consume();


						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }


				}
				break;

			}
			} finally { DebugExitSubRule(6); }

			DebugLocation(51, 36);
			// Queries\\PomonaQuery.g:51:36: ( 'm' | 'M' | 'f' | 'F' )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1=='F'||LA7_1=='M'||LA7_1=='f'||LA7_1=='m'))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:
				{
				DebugLocation(51, 36);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 40);
			LeaveRule("INT", 40);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 41);
		TraceIn("WS", 41);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:56:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:56:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(56, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(60, 11);
			_channel=HIDDEN;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 41);
			LeaveRule("WS", 41);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 42);
		TraceIn("STRING", 42);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// Queries\\PomonaQuery.g:69:5: ( ( '\\'' (~ ( '\\\\' | '\\'' ) )* '\\'' )+ )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:69:8: ( '\\'' (~ ( '\\\\' | '\\'' ) )* '\\'' )+
			{
			DebugLocation(69, 8);
			// Queries\\PomonaQuery.g:69:8: ( '\\'' (~ ( '\\\\' | '\\'' ) )* '\\'' )+
			int cnt9=0;
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1=='\''))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// Queries\\PomonaQuery.g:69:10: '\\'' (~ ( '\\\\' | '\\'' ) )* '\\''
					{
					DebugLocation(69, 10);
					Match('\''); 
					DebugLocation(69, 15);
					// Queries\\PomonaQuery.g:69:15: (~ ( '\\\\' | '\\'' ) )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_1 = input.LA(1);

						if (((LA8_1>='\u0000' && LA8_1<='&')||(LA8_1>='(' && LA8_1<='[')||(LA8_1>=']' && LA8_1<='\uFFFF')))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// Queries\\PomonaQuery.g:
							{
							DebugLocation(69, 15);
							input.Consume();


							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(69, 37);
					Match('\''); 

					}
					break;

				default:
					if (cnt9 >= 1)
						goto loop9;

					EarlyExitException eee9 = new EarlyExitException( 9, input );
					DebugRecognitionException(eee9);
					throw eee9;
				}
				cnt9++;
			}
			loop9:
				;

			} finally { DebugExitSubRule(9); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 42);
			LeaveRule("STRING", 42);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 43);
		TraceIn("HEX_DIGIT", 43);
		try
		{
			// Queries\\PomonaQuery.g:187:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:
			{
			DebugLocation(187, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 43);
			LeaveRule("HEX_DIGIT", 43);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 44);
		TraceIn("ESC_SEQ", 44);
		try
		{
			// Queries\\PomonaQuery.g:191:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt10=3;
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt10 = 1;
					}
					break;
				case 'u':
					{
					alt10 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt10 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 10, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:191:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(191, 9);
				Match('\\'); 
				DebugLocation(191, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:192:9: UNICODE_ESC
				{
				DebugLocation(192, 9);
				mUNICODE_ESC(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Queries\\PomonaQuery.g:193:9: OCTAL_ESC
				{
				DebugLocation(193, 9);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 44);
			LeaveRule("ESC_SEQ", 44);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 45);
		TraceIn("OCTAL_ESC", 45);
		try
		{
			// Queries\\PomonaQuery.g:198:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt11=3;
			try { DebugEnterDecision(11, false);
			int LA11_1 = input.LA(1);

			if ((LA11_1=='\\'))
			{
				int LA11_2 = input.LA(2);

				if (((LA11_2>='0' && LA11_2<='3')))
				{
					int LA11_3 = input.LA(3);

					if (((LA11_3>='0' && LA11_3<='7')))
					{
						int LA11_4 = input.LA(4);

						if (((LA11_4>='0' && LA11_4<='7')))
						{
							alt11 = 1;
						}
						else
						{
							alt11 = 2;
						}
					}
					else
					{
						alt11 = 3;
					}
				}
				else if (((LA11_2>='4' && LA11_2<='7')))
				{
					int LA11_3 = input.LA(3);

					if (((LA11_3>='0' && LA11_3<='7')))
					{
						alt11 = 2;
					}
					else
					{
						alt11 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 11, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Queries\\PomonaQuery.g:198:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(198, 9);
				Match('\\'); 
				DebugLocation(198, 14);
				input.Consume();

				DebugLocation(198, 25);
				input.Consume();

				DebugLocation(198, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Queries\\PomonaQuery.g:199:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(199, 9);
				Match('\\'); 
				DebugLocation(199, 14);
				input.Consume();

				DebugLocation(199, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Queries\\PomonaQuery.g:200:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(200, 9);
				Match('\\'); 
				DebugLocation(200, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 45);
			LeaveRule("OCTAL_ESC", 45);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 46);
		TraceIn("UNICODE_ESC", 46);
		try
		{
			// Queries\\PomonaQuery.g:205:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:205:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(205, 9);
			Match('\\'); 
			DebugLocation(205, 14);
			Match('u'); 
			DebugLocation(205, 18);
			mHEX_DIGIT(); 
			DebugLocation(205, 28);
			mHEX_DIGIT(); 
			DebugLocation(205, 38);
			mHEX_DIGIT(); 
			DebugLocation(205, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 46);
			LeaveRule("UNICODE_ESC", 46);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	public override void mTokens()
	{
		// Queries\\PomonaQuery.g:1:8: ( T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | PREFIXED_STRING | ID | INT | WS | STRING )
		int alt12=42;
		try { DebugEnterDecision(12, false);
		try
		{
			alt12 = dfa12.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(12); }
		switch (alt12)
		{
		case 1:
			DebugEnterAlt(1);
			// Queries\\PomonaQuery.g:1:10: T__37
			{
			DebugLocation(1, 10);
			mT__37(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Queries\\PomonaQuery.g:1:16: T__38
			{
			DebugLocation(1, 16);
			mT__38(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Queries\\PomonaQuery.g:1:22: T__39
			{
			DebugLocation(1, 22);
			mT__39(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Queries\\PomonaQuery.g:1:28: T__40
			{
			DebugLocation(1, 28);
			mT__40(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Queries\\PomonaQuery.g:1:34: T__41
			{
			DebugLocation(1, 34);
			mT__41(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Queries\\PomonaQuery.g:1:40: T__42
			{
			DebugLocation(1, 40);
			mT__42(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Queries\\PomonaQuery.g:1:46: T__43
			{
			DebugLocation(1, 46);
			mT__43(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Queries\\PomonaQuery.g:1:52: T__44
			{
			DebugLocation(1, 52);
			mT__44(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Queries\\PomonaQuery.g:1:58: T__45
			{
			DebugLocation(1, 58);
			mT__45(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Queries\\PomonaQuery.g:1:64: T__46
			{
			DebugLocation(1, 64);
			mT__46(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Queries\\PomonaQuery.g:1:70: T__47
			{
			DebugLocation(1, 70);
			mT__47(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Queries\\PomonaQuery.g:1:76: T__48
			{
			DebugLocation(1, 76);
			mT__48(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Queries\\PomonaQuery.g:1:82: T__49
			{
			DebugLocation(1, 82);
			mT__49(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Queries\\PomonaQuery.g:1:88: T__50
			{
			DebugLocation(1, 88);
			mT__50(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Queries\\PomonaQuery.g:1:94: T__51
			{
			DebugLocation(1, 94);
			mT__51(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Queries\\PomonaQuery.g:1:100: T__52
			{
			DebugLocation(1, 100);
			mT__52(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Queries\\PomonaQuery.g:1:106: T__53
			{
			DebugLocation(1, 106);
			mT__53(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Queries\\PomonaQuery.g:1:112: T__54
			{
			DebugLocation(1, 112);
			mT__54(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Queries\\PomonaQuery.g:1:118: T__55
			{
			DebugLocation(1, 118);
			mT__55(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Queries\\PomonaQuery.g:1:124: T__56
			{
			DebugLocation(1, 124);
			mT__56(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Queries\\PomonaQuery.g:1:130: T__57
			{
			DebugLocation(1, 130);
			mT__57(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Queries\\PomonaQuery.g:1:136: T__58
			{
			DebugLocation(1, 136);
			mT__58(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Queries\\PomonaQuery.g:1:142: T__59
			{
			DebugLocation(1, 142);
			mT__59(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Queries\\PomonaQuery.g:1:148: T__60
			{
			DebugLocation(1, 148);
			mT__60(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Queries\\PomonaQuery.g:1:154: T__61
			{
			DebugLocation(1, 154);
			mT__61(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// Queries\\PomonaQuery.g:1:160: T__62
			{
			DebugLocation(1, 160);
			mT__62(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// Queries\\PomonaQuery.g:1:166: T__63
			{
			DebugLocation(1, 166);
			mT__63(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// Queries\\PomonaQuery.g:1:172: T__64
			{
			DebugLocation(1, 172);
			mT__64(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// Queries\\PomonaQuery.g:1:178: T__65
			{
			DebugLocation(1, 178);
			mT__65(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// Queries\\PomonaQuery.g:1:184: T__66
			{
			DebugLocation(1, 184);
			mT__66(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// Queries\\PomonaQuery.g:1:190: T__67
			{
			DebugLocation(1, 190);
			mT__67(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// Queries\\PomonaQuery.g:1:196: T__68
			{
			DebugLocation(1, 196);
			mT__68(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// Queries\\PomonaQuery.g:1:202: T__69
			{
			DebugLocation(1, 202);
			mT__69(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// Queries\\PomonaQuery.g:1:208: T__70
			{
			DebugLocation(1, 208);
			mT__70(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// Queries\\PomonaQuery.g:1:214: T__71
			{
			DebugLocation(1, 214);
			mT__71(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// Queries\\PomonaQuery.g:1:220: T__72
			{
			DebugLocation(1, 220);
			mT__72(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// Queries\\PomonaQuery.g:1:226: T__73
			{
			DebugLocation(1, 226);
			mT__73(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// Queries\\PomonaQuery.g:1:232: PREFIXED_STRING
			{
			DebugLocation(1, 232);
			mPREFIXED_STRING(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// Queries\\PomonaQuery.g:1:248: ID
			{
			DebugLocation(1, 248);
			mID(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// Queries\\PomonaQuery.g:1:251: INT
			{
			DebugLocation(1, 251);
			mINT(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// Queries\\PomonaQuery.g:1:255: WS
			{
			DebugLocation(1, 255);
			mWS(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// Queries\\PomonaQuery.g:1:258: STRING
			{
			DebugLocation(1, 258);
			mSTRING(); 

			}
			break;

		}

	}


	#region DFA
	DFA12 dfa12;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa12 = new DFA12(this);
	}

	private class DFA12 : DFA
	{
		private const string DFA12_eotS =
			"\x1\xFFFF\x1\x23\xB\xFFFF\x1\x25\x1\xFFFF\x1\x27\x2\xFFFF\xA\x1E\x1\xFFFF"+
			"\x1\x1E\xA\xFFFF\x2\x1E\x1\x3C\x1\x1E\x1\xFFFF\x1\x1E\x1\x3E\x1\x3F\x1"+
			"\x40\x1\x41\x1\x42\x1\x43\x2\x1E\x1\x46\x1\x1E\x1\x48\x1\x1E\x1\x4A\x1"+
			"\x4B\x1\xFFFF\x1\x4C\x6\xFFFF\x1\x4D\x1\x4E\x1\xFFFF\x1\x4F\x1\xFFFF"+
			"\x1\x50\x7\xFFFF";
		private const string DFA12_eofS =
			"\x51\xFFFF";
		private const string DFA12_minS =
			"\x1\x9\x1\x3D\xB\xFFFF\x1\x3D\x1\xFFFF\x1\x3D\x2\xFFFF\xA\x27\x1\xFFFF"+
			"\x1\x27\xA\xFFFF\x4\x27\x1\xFFFF\xF\x27\x1\xFFFF\x1\x27\x6\xFFFF\x2\x27"+
			"\x1\xFFFF\x1\x27\x1\xFFFF\x1\x27\x7\xFFFF";
		private const string DFA12_maxS =
			"\x1\x7C\x1\x3D\xB\xFFFF\x1\x3D\x1\xFFFF\x1\x3D\x2\xFFFF\xA\x7A\x1\xFFFF"+
			"\x1\x7A\xA\xFFFF\x4\x7A\x1\xFFFF\xF\x7A\x1\xFFFF\x1\x7A\x6\xFFFF\x2\x7A"+
			"\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x7A\x7\xFFFF";
		private const string DFA12_acceptS =
			"\x2\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC"+
			"\x1\xD\x1\xFFFF\x1\x10\x1\xFFFF\x1\x13\x1\x14\xA\xFFFF\x1\x25\x1\xFFFF"+
			"\x1\x27\x1\x28\x1\x29\x1\x2A\x1\x2\x1\x1\x1\xF\x1\xE\x1\x12\x1\x11\x4"+
			"\xFFFF\x1\x26\xF\xFFFF\x1\x17\x1\xFFFF\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1"+
			"\x1D\x1\x1E\x2\xFFFF\x1\x21\x1\xFFFF\x1\x23\x1\xFFFF\x1\x15\x1\x16\x1"+
			"\x18\x1\x1F\x1\x20\x1\x22\x1\x24";
		private const string DFA12_specialS =
			"\x51\xFFFF}>";
		private static readonly string[] DFA12_transitionS =
			{
				"\x2\x20\x2\xFFFF\x1\x20\x12\xFFFF\x1\x20\x1\x1\x3\xFFFF\x1\x2\x1\x3"+
				"\x1\x21\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\xA\x1F\x1\xC"+
				"\x1\xFFFF\x1\xD\x1\xE\x1\xF\x1\xFFFF\x1\x1E\x1A\x1D\x1\x10\x1\xFFFF"+
				"\x1\x11\x1\xFFFF\x1\x1E\x1\xFFFF\x1\x12\x2\x1D\x1\x13\x1\x14\x1\x1D"+
				"\x1\x15\x1\x1D\x1\x16\x2\x1D\x1\x17\x1\x18\x1\x19\x1\x1A\x3\x1D\x1\x1B"+
				"\x7\x1D\x1\xFFFF\x1\x1C",
				"\x1\x22",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x24",
				"",
				"\x1\x26",
				"",
				"",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x3\x2B\x1\x28\x9\x2B"+
				"\x1\x29\x4\x2B\x1\x2A\x7\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x8\x2B\x1\x2D\x11"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x10\x2B\x1\x2E\x9"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x4\x2B\x1\x2F\xE\x2B"+
				"\x1\x30\x6\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\xD\x2B\x1\x31\xC\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x4\x2B\x1\x32\xE\x2B"+
				"\x1\x33\x6\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\xE\x2B\x1\x34\x5\x2B"+
				"\x1\x35\x5\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x4\x2B\x1\x36\x9\x2B"+
				"\x1\x37\xB\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x11\x2B\x1\x38\x8"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x14\x2B\x1\x39\x5"+
				"\x2B",
				"",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x1A\x2B",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x3\x2B\x1\x3A\x16"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x3\x2B\x1\x3B\x16"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x1A\x2B",
				"",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x15\x2B\x1\x3D\x4"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x3\x2B\x1\x44\x16"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\xB\x2B\x1\x45\xE\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x13\x2B\x1\x47\x6"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x6\xFFFF\x1\x2B\x1\x49\x18"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"",
				"\x1\x2C\x8\xFFFF\xA\x2B\x7\xFFFF\x1A\x2B\x4\xFFFF\x1\x1E\x1\xFFFF\x1A"+
				"\x2B",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA12_eot = DFA.UnpackEncodedString(DFA12_eotS);
		private static readonly short[] DFA12_eof = DFA.UnpackEncodedString(DFA12_eofS);
		private static readonly char[] DFA12_min = DFA.UnpackEncodedStringToUnsignedChars(DFA12_minS);
		private static readonly char[] DFA12_max = DFA.UnpackEncodedStringToUnsignedChars(DFA12_maxS);
		private static readonly short[] DFA12_accept = DFA.UnpackEncodedString(DFA12_acceptS);
		private static readonly short[] DFA12_special = DFA.UnpackEncodedString(DFA12_specialS);
		private static readonly short[][] DFA12_transition;

		static DFA12()
		{
			int numStates = DFA12_transitionS.Length;
			DFA12_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA12_transition[i] = DFA.UnpackEncodedString(DFA12_transitionS[i]);
			}
		}

		public DFA12( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 12;
			this.eot = DFA12_eot;
			this.eof = DFA12_eof;
			this.min = DFA12_min;
			this.max = DFA12_max;
			this.accept = DFA12_accept;
			this.special = DFA12_special;
			this.transition = DFA12_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | T__54 | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | PREFIXED_STRING | ID | INT | WS | STRING );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}

} // namespace  Pomona.Queries 
